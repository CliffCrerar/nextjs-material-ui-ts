(window.webpackJsonp = window.webpackJsonp || []).push([
    ["fdcf"], {
        "/W3I": function(e, n, o) {
            "use strict";
            var t = o("mXGw"),
                a = o.n(t),
                r = o("0Zz2");
            n.a = Object(r.a)(a.a.createElement("path", { d: "M12 7C6.48 7 2 9.24 2 12c0 2.24 2.94 4.13 7 4.77V20l4-4-4-4v2.73c-3.15-.56-5-1.9-5-2.73 0-1.06 3.04-3 8-3s8 1.94 8 3c0 .73-1.46 1.89-4 2.53v2.05c3.53-.77 6-2.53 6-4.58 0-2.76-4.48-5-10-5z" }), "ThreeSixty")
        },
        "0Ifi": function(e, n) { e.exports = "import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\nimport Icon from '@material-ui/core/Icon';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '& > span': {\n        margin: theme.spacing(2),\n      },\n    },\n    iconHover: {\n      '&:hover': {\n        color: red[800],\n      },\n    },\n  }),\n);\n\nexport default function Icons() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Icon>add_circle</Icon>\n      <Icon color=\"primary\">add_circle</Icon>\n      <Icon color=\"secondary\">add_circle</Icon>\n      <Icon color=\"action\">add_circle</Icon>\n      <Icon className={classes.iconHover} color=\"error\" style={{ fontSize: 30 }}>\n        add_circle\n      </Icon>\n      <Icon color=\"disabled\" fontSize=\"large\">\n        add_circle\n      </Icon>\n    </div>\n  );\n}\n" },
        "79ed": function(e, n) { e.exports = '---\ntitle: crwdns102252:0crwdne102252:0\ncomponents: crwdns102254:0crwdne102254:0\n---\n\n# crwdns102256:0crwdne102256:0\n\n<p class="description">crwdns102258:0crwdne102258:0</p>\n\ncrwdns103500:0crwdne103500:0\n\n1. crwdns103502:0crwdne103502:0\n1. crwdns103504:0crwdne103504:0\n1. crwdns103506:0crwdne103506:0\n\n## crwdns103508:0crwdne103508:0\n\ncrwdns103510:0crwdne103510:0 crwdns102758:0crwdne102758:0 crwdns103512:0crwdne103512:0\n\n### crwdns102762:0crwdne102762:0\n\ncrwdns103514:0crwdne103514:0 crwdns103516:0crwdne103516:0\n\n- crwdns103518:0crwdne103518:0\n\n  ```jsx\n  crwdns103520:0crwdne103520:0\n  ```\n\n- crwdns103522:0crwdne103522:0\n\n  ```jsx\n  crwdns103524:0{ AccessAlarm, ThreeDRotation }crwdne103524:0\n  ```\n\ncrwdns103526:0crwdne103526:0 crwdns103528:0crwdne103528:0 crwdns103530:0crwdne103530:0\n\ncrwdns103532:0crwdne103532:0 crwdns103534:0crwdne103534:0 crwdns103536:0crwdne103536:0\n\n- crwdns103538:0crwdne103538:0\n- crwdns103540:0crwdne103540:0\n- crwdns103542:0crwdne103542:0\n- crwdns103544:0crwdne103544:0\n- crwdns103546:0crwdne103546:0\n\ncrwdns103548:0crwdne103548:0 crwdns103550:0crwdne103550:0\n\ncrwdns103552:0crwdne103552:0\n\n## crwdns103554:0crwdne103554:0\n\ncrwdns103556:0crwdne103556:0 crwdns103558:0crwdne103558:0 crwdns103560:0crwdne103560:0\n\ncrwdns103562:0crwdne103562:0 crwdns103564:0crwdne103564:0 crwdns103566:0crwdne103566:0\n\ncrwdns103568:0crwdne103568:0\n\n### crwdns103570:0crwdne103570:0\n\n#### crwdns103572:0crwdne103572:0\n\ncrwdns103574:0crwdne103574:0\n\n#### crwdns103576:0crwdne103576:0\n\ncrwdns103578:0crwdne103578:0 crwdns103580:0crwdne103580:0\n\ncrwdns103582:0crwdne103582:0\n\n## crwdns103584:0crwdne103584:0\n\ncrwdns102354:0crwdne102354:0 crwdns102356:0crwdne102356:0\n\n```html\ncrwdns102358:0crwdne102358:0\n```\n\ncrwdns102360:0crwdne102360:0 crwdns102362:0crwdne102362:0\n\ncrwdns102364:0crwdne102364:0\n\n```jsx\ncrwdns102366:0crwdne102366:0\n```\n\ncrwdns102368:0crwdne102368:0 crwdns102370:0crwdne102370:0\n\n### crwdns102372:0crwdne102372:0\n\ncrwdns102374:0crwdne102374:0\n\n### crwdns102376:0crwdne102376:0\n\ncrwdns102378:0crwdne102378:0\n\ncrwdns102380:0crwdne102380:0\n\n## crwdns102832:0crwdne102832:0 crwdns102834:0crwdne102834:0\n\ncrwdns102386:0crwdne102386:0 crwdns102388:0crwdne102388:0\n\ncrwdns102390:0crwdne102390:0\n\n## crwdns102836:0crwdne102836:0\n\ncrwdns102394:0crwdne102394:0 crwdns102396:0crwdne102396:0\n- crwdns103586:0crwdne103586:0 crwdns103588:0crwdne103588:0\n- crwdns103590:0crwdne103590:0 crwdns103592:0crwdne103592:0\n\n### crwdns102406:0crwdne102406:0\n\ncrwdns102408:0crwdne102408:0 crwdns102410:0crwdne102410:0\n\n### crwdns102412:0crwdne102412:0\n\ncrwdns102414:0crwdne102414:0 crwdns102416:0crwdne102416:0\n\ncrwdns102418:0crwdne102418:0\n\n```jsx\ncrwdns102420:0crwdne102420:0\n\ncrwdns102422:0crwdne102422:0\n```\n\n### crwdns102424:0crwdne102424:0\n\ncrwdns102426:0crwdne102426:0 crwdns102428:0crwdne102428:0\n\n### crwdns102430:0crwdne102430:0\n\ncrwdns102432:0crwdne102432:0\n\n```jsx\ncrwdns102434:0crwdne102434:0\n\ncrwdns102436:0crwdne102436:0\n```\n\n### crwdns102438:0crwdne102438:0\n\n- crwdns103594:0crwdne103594:0\n' },
        "9Zx2": function(e, n, o) {
            "use strict";
            var t = o("mXGw"),
                a = o.n(t),
                r = o("0Zz2");
            n.a = Object(r.a)(a.a.createElement("path", { d: "M6 21h12V7H6v14zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z" }), "DeleteSharp")
        },
        "9mqe": function(e, n) { e.exports = '---\ntitle: React Icon Component\ncomponents: Icon, SvgIcon\n---\n\n# Iconos\n\n<p class="description">GuÃ­a y sugerencias para usar iconos con Material-UI.</p>\n\nMaterial-UI provides icons support in three ways:\n\n1. Standardized [Material Design icons](#material-icons) exported as React components (SVG icons).\n1. With the [SvgIcon](#svgicon) component, a React wrapper for custom SVG icons.\n1. With the [Icon](#icon-font-icons) component, a React wrapper for custom font icons.\n\n## Material Icons\n\nMaterial Design has standardized over 1,000 official icons, each in five different "themes" (see below). For each SVG icon, we export the respective React component from the `@material-ui/icons` package. You can search the full list of these icons in our [built-in search page](/components/material-icons/).\n\n### ImplementaciÃ³n\n\nInstall `@material-ui/icons`. Import icons using one of these two options:\n\n- Option 1:\n\n  ```jsx\n  import AccessAlarmIcon from \'@material-ui/icons/AccessAlarm\';\n  import ThreeDRotation from \'@material-ui/icons/ThreeDRotation\';\n  ```\n\n- Option 2:\n\n  ```jsx\n  import { AccessAlarm, ThreeDRotation } from \'@material-ui/icons\';\n  ```\n\nThe safest is Option 1 but Option 2 can yield the best developer experience. Make sure you follow the [minimizing bundle size guide](/guides/minimizing-bundle-size/#option-2) before using the second approach. The configuration of a Babel plugin is encouraged.\n\nEach icon also has a "theme": `Filled` (default), `Outlined`, `Rounded`, `Two tone` and `Sharp`. If you want to import the icon component with a "theme" different than default, append the "theme" name to the icon name. For example `@material-ui/icons/Delete` icon with:\n\n- `Filled` "theme" (default) is exported as `@material-ui/icons/Delete`,\n- `Outlined` "theme" is exported as `@material-ui/icons/DeleteOutlined`,\n- `Rounded` "theme" is exported as `@material-ui/icons/DeleteRounded`,\n- `Two tone` "theme" is exported as `@material-ui/icons/DeleteTwoTone`,\n- `Sharp` "theme" is exported as `@material-ui/icons/DeleteSharp`.\n\nNote: The Material Design specification names the icons using "snake_case" naming (for example `delete_forever`, `add_a_photo`), while `@material-ui/icons` exports the respective icons using "PascalCase" naming (for example `DeleteForever`, `AddAPhoto`). There are three exceptions to this naming rule: `3d_rotation` exported as `ThreeDRotation`, `4k` exported as `FourK`, and `360` exported as `ThreeSixty`.\n\n{{"demo": "pages/components/icons/SvgMaterialIcons.js"}}\n\n## SvgIcon\n\nIf you need a custom SVG icon (not available in Material Icons) you should use the `SvgIcon` wrapper. The `SvgIcon` component takes the SVG `path` element as its child and converts it to a React component that displays this SVG icon, and allows the icon to be styled and respond to mouse events. SVG elements should be scaled for a 24x24px viewport.\n\nThe resulting icon can be used as is, or included as a child for other Material-UI components that use icons. Por defecto, un Icono heredarÃ¡ el color del texto actual. Opcionalmente, se puede cambiar el color usando uno de los atributos del color del tema: `primary`, `secondary`, `action`, `error` & `disabled`.\n\n{{"demo": "pages/components/icons/SvgIcons.js"}}\n\n### Libraries\n\n#### Material Design (recommended)\n\nMaterial Design has standardized over [1,000 official icons](#material-icons).\n\n#### MDI\n\n[materialdesignicons.com](https://materialdesignicons.com/) provides over 2,000 icons. For the wanted icon, copy the SVG `path` they provide, and use it as the child of the `SvgIcon` component.\n\nNote: [mdi-material-ui](https://github.com/TeamWertarbyte/mdi-material-ui) has already wrapped each of these SVG icons with the `SvgIcon` component, so you don\'t have to do it yourself.\n\n## Icon (Font icons)\n\nEl componente `Icon` mostrarÃ¡ iconos de cualquier fuente compatible con ligaduras. Como requisito previo, se debe incluir una, como la [fuente de iconos Material](https://google.github.io/material-design-icons/#icon-font-for-the-web) en el proyecto, por ejemplo, vÃ­a Google Web Fonts:\n\n```html\n<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />\n```\n\n`Icon` will set the correct class name for the Material icon font. For other fonts, you must supply the class name using the Icon component\'s `className` property.\n\nPara usar un icono, simplemente se envuelve el nombre del icono (ligadura de la fuente) con el componente `Icono`, por ejemplo:\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\n\n<Icon>star</Icon>\n```\n\nPor defecto, un Icono heredarÃ¡ el color del texto actual. Opcionalmente, se puede cambiar el color usando uno de los atributos del color del tema: `primary`, `secondary`, `action`, `error` & `disabled`.\n\n### Fuente de iconos Material\n\n{{"demo": "pages/components/icons/Icons.js"}}\n\n### Font Awesome\n\n[Font Awesome](https://fontawesome.com/icons) se puede utilizar con el componente `Icon` siguiente manera:\n\n{{"demo": "pages/components/icons/FontAwesome.js", "hideEditButton": true}}\n\n## Font vs SVG. Which approach to use?\n\nAmbos enfoques funcionan bien, sin embargo, existen algunas diferencias sutiles, especialmente en tÃ©rminos de rendimiento y calidad de representaciÃ³n. Siempre que sea posible, se prefiere SVG, ya que permite la divisiÃ³n de cÃ³digo, admite mÃ¡s iconos, se procesa mÃ¡s rÃ¡pido y mejor.\n\nFor more details, you can check out [why GitHub migrated from font icons to SVG icons](https://github.blog/2016-02-22-delivering-octicons-with-svg/).\n\n## Accesibilidad\n\nLos iconos pueden transmitir todo tipo de informaciÃ³n significativa, por lo que es importante que alcancen a la mayor cantidad de personas posible. There are two use cases youâ€™ll want to consider:\n- **Decorative Icons** are only being used for visual or branding reinforcement. If they were removed from the page, users would still understand and be able to use your page.\n- **Semantic Icons** are ones that youâ€™re using to convey meaning, rather than just pure decoration. This includes icons without text next to them used as interactive controls â€” buttons, form elements, toggles, etc.\n\n### Iconos SVG Decorativos\n\nIf your icons are purely decorative, youâ€™re already done! The `aria-hidden=true` attribute is added so that your icons are properly accessible (invisible).\n\n### Iconos SVG SemÃ¡nticos\n\nSi el icono tiene un significado semÃ¡ntico, todo lo que se necesita hacer es usar la propiedad `titleAccess="meaning"`. The `role="img"` attribute and the `<title>` element are added so that your icons are properly accessible.\n\nEn el caso delos elementos interactivos a los que se puede hacer foco, como cuando se usa con un botÃ³n icono, se puede utilizar la propiedad `aria-label`:\n\n```jsx\nimport IconButton from \'@material-ui/core/IconButton\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\n// ...\n\n<IconButton aria-label="delete">\n  <SvgIcon>\n    <path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" />\n  </SvgIcon>\n</IconButton>\n```\n\n### Iconos de Fuente Decorativos\n\nIf your icons are purely decorative, youâ€™re already done! The `aria-hidden=true` attribute is added so that your icons are properly accessible (invisible).\n\n### Iconos de Fuente SemÃ¡nticos\n\nSi los iconos tienen significado semÃ¡ntico, se necesita proporcionar una alternativa de texto sÃ³lo visible a las tecnologÃ­as de asistencia.\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\nimport Typography from \'@material-ui/core/Typography\';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Typography variant="srOnly">Crear ususario</Typography>\n```\n\n### Referencia\n\n- https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/\n' },
        FxtG: function(e, n, o) {
            (function(e) {
                ! function(e) {
                    "use strict";
                    n.loadCSS = function(n, o, t, a) {
                        var r, i = e.document,
                            s = i.createElement("link");
                        if (o) r = o;
                        else {
                            var c = (i.body || i.getElementsByTagName("head")[0]).childNodes;
                            r = c[c.length - 1]
                        }
                        var l = i.styleSheets;
                        if (a)
                            for (var d in a) a.hasOwnProperty(d) && s.setAttribute(d, a[d]);
                        s.rel = "stylesheet", s.href = n, s.media = "only x",
                            function e(n) {
                                if (i.body) return n();
                                setTimeout(function() { e(n) })
                            }(function() { r.parentNode.insertBefore(s, o ? r : r.nextSibling) });
                        var m = function(e) {
                            for (var n = s.href, o = l.length; o--;)
                                if (l[o].href === n) return e();
                            setTimeout(function() { m(e) })
                        };

                        function u() { s.addEventListener && s.removeEventListener("load", u), s.media = t || "all" }
                        return s.addEventListener && s.addEventListener("load", u), s.onloadcssdefined = m, m(u), s
                    }
                }(void 0 !== e ? e : this)
            }).call(this, o("dm4u"))
        },
        GMu4: function(e, n, o) {
            "use strict";
            o.r(n), o.d(n, "default", function() { return O });
            var t = o("mXGw"),
                a = o.n(t),
                r = o("pQ8Y"),
                i = o("Oy88"),
                s = o("Ozru"),
                c = o("U6S3"),
                l = o("sH+W"),
                d = o("zg0K"),
                m = o("9Zx2"),
                u = o("vR0R"),
                p = o("yvuJ"),
                h = o("qZQ6"),
                f = o("Tjoj"),
                g = o("JgRu"),
                v = o("N+6P"),
                y = o("hyOX"),
                I = o("/W3I"),
                w = o("yZEQ"),
                S = Object(w.a)(function(e) { return { root: { color: e.palette.text.primary } } }),
                b = a.a.createElement(r.a, { item: !0, xs: 4 }, a.a.createElement(i.a, null, "Filled")),
                x = a.a.createElement(r.a, { item: !0, xs: 8 }, a.a.createElement(s.a, null), a.a.createElement(u.a, null)),
                T = a.a.createElement(r.a, { item: !0, xs: 4 }, a.a.createElement(i.a, null, "Outlined")),
                D = a.a.createElement(r.a, { item: !0, xs: 8 }, a.a.createElement(c.a, null), a.a.createElement(p.a, null)),
                G = a.a.createElement(r.a, { item: !0, xs: 4 }, a.a.createElement(i.a, null, "Rounded")),
                E = a.a.createElement(r.a, { item: !0, xs: 8 }, a.a.createElement(l.a, null), a.a.createElement(h.a, null)),
                z = a.a.createElement(r.a, { item: !0, xs: 4 }, a.a.createElement(i.a, null, "Two Tone")),
                M = a.a.createElement(r.a, { item: !0, xs: 8 }, a.a.createElement(d.a, null), a.a.createElement(f.a, null)),
                F = a.a.createElement(r.a, { item: !0, xs: 4 }, a.a.createElement(i.a, null, "Sharp")),
                j = a.a.createElement(r.a, { item: !0, xs: 8 }, a.a.createElement(m.a, null), a.a.createElement(g.a, null)),
                R = a.a.createElement(r.a, { item: !0, xs: 4 }, a.a.createElement(i.a, null, "Edge-cases")),
                V = a.a.createElement(r.a, { item: !0, xs: 8 }, a.a.createElement(v.a, null), a.a.createElement(y.a, null), a.a.createElement(I.a, null));

            function O() { var e = S(); return a.a.createElement(r.a, { container: !0, className: e.root }, b, x, T, D, G, E, z, M, F, j, R, V) }
        },
        H1Ae: function(e, n, o) {
            (window.__NEXT_P = window.__NEXT_P || []).push(["/components/icons", function() { var e = o("RGRV"); return { page: e.default || e } }])
        },
        IP1A: function(e, n) { e.exports = "import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport DeleteTwoToneIcon from '@material-ui/icons/DeleteTwoTone';\nimport DeleteSharpIcon from '@material-ui/icons/DeleteSharp';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport DeleteForeverOutlinedIcon from '@material-ui/icons/DeleteForeverOutlined';\nimport DeleteForeverRoundedIcon from '@material-ui/icons/DeleteForeverRounded';\nimport DeleteForeverTwoToneIcon from '@material-ui/icons/DeleteForeverTwoTone';\nimport DeleteForeverSharpIcon from '@material-ui/icons/DeleteForeverSharp';\nimport ThreeDRotationIcon from '@material-ui/icons/ThreeDRotation';\nimport FourKIcon from '@material-ui/icons/FourK';\nimport ThreeSixtyIcon from '@material-ui/icons/ThreeSixty';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    color: theme.palette.text.primary,\n  },\n}));\n\nexport default function SvgMaterialIcons() {\n  const classes = useStyles();\n\n  return (\n    <Grid container className={classes.root}>\n      <Grid item xs={4}>\n        <Typography>Filled</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteIcon />\n        <DeleteForeverIcon />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Outlined</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteOutlinedIcon />\n        <DeleteForeverOutlinedIcon />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Rounded</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteRoundedIcon />\n        <DeleteForeverRoundedIcon />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Two Tone</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteTwoToneIcon />\n        <DeleteForeverTwoToneIcon />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Sharp</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteSharpIcon />\n        <DeleteForeverSharpIcon />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Edge-cases</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <ThreeDRotationIcon />\n        <FourKIcon />\n        <ThreeSixtyIcon />\n      </Grid>\n    </Grid>\n  );\n}\n" },
        JgRu: function(e, n, o) {
            "use strict";
            var t = o("mXGw"),
                a = o.n(t),
                r = o("0Zz2");
            n.a = Object(r.a)(a.a.createElement("path", { d: "M6 21h12V7H6v14zm2.46-9.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4h-3.5z" }), "DeleteForeverSharp")
        },
        Krfi: function(e, n) { e.exports = "import React from 'react';\nimport clsx from 'clsx';\nimport { loadCSS } from 'fg-loadcss';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\nimport Icon from '@material-ui/core/Icon';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > .fa': {\n      margin: theme.spacing(2),\n    },\n  },\n  iconHover: {\n    margin: theme.spacing(2),\n    '&:hover': {\n      color: red[800],\n    },\n  },\n}));\n\nexport default function FontAwesome() {\n  const classes = useStyles();\n\n  React.useEffect(() => {\n    loadCSS(\n      'https://use.fontawesome.com/releases/v5.1.0/css/all.css',\n      document.querySelector('#font-awesome-css'),\n    );\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <Icon className=\"fa fa-plus-circle\" />\n      <Icon className=\"fa fa-plus-circle\" color=\"primary\" />\n      <Icon className=\"fa fa-plus-circle\" color=\"secondary\" />\n      <Icon className=\"fa fa-plus-circle\" color=\"action\" />\n      <Icon\n        className={clsx(classes.iconHover, 'fa fa-plus-circle')}\n        color=\"error\"\n        style={{ fontSize: 30 }}\n      />\n      <Icon className=\"fa fa-plus-circle\" color=\"disabled\" fontSize=\"large\" />\n    </div>\n  );\n}\n" },
        M8cl: function(e, n) { e.exports = '---\ntitle: React Icon Component\ncomponents: Icon, SvgIcon\n---\n\n# IcÃ´nes\n\n<p class="description">Conseils et suggestions pour l\'utilisation des icÃ´nes avec Material-UI.</p>\n\nMaterial-UI provides icons support in three ways:\n\n1. Standardized [Material Design icons](#material-icons) exported as React components (SVG icons).\n1. With the [SvgIcon](#svgicon) component, a React wrapper for custom SVG icons.\n1. With the [Icon](#icon-font-icons) component, a React wrapper for custom font icons.\n\n## IcÃ´nes Material Ui\n\nMaterial Design has standardized over 1,000 official icons, each in five different "themes" (see below). For each SVG icon, we export the respective React component from the `@material-ui/icons` package. You can search the full list of these icons in our [built-in search page](/components/material-icons/).\n\n### Utilisation\n\nInstall `@material-ui/icons`. Import icons using one of these two options:\n\n- Option 1:\n\n  ```jsx\n  import AccessAlarmIcon from \'@material-ui/icons/AccessAlarm\';\n  import ThreeDRotation from \'@material-ui/icons/ThreeDRotation\';\n  ```\n\n- Option 2:\n\n  ```jsx\n  import { AccessAlarm, ThreeDRotation } from \'@material-ui/icons\';\n  ```\n\nThe safest is Option 1 but Option 2 can yield the best developer experience. Make sure you follow the [minimizing bundle size guide](/guides/minimizing-bundle-size/#option-2) before using the second approach. The configuration of a Babel plugin is encouraged.\n\nEach icon also has a "theme": `Filled` (default), `Outlined`, `Rounded`, `Two tone` and `Sharp`. If you want to import the icon component with a "theme" different than default, append the "theme" name to the icon name. For example `@material-ui/icons/Delete` icon with:\n\n- `Filled` "theme" (default) is exported as `@material-ui/icons/Delete`,\n- `Outlined` "theme" is exported as `@material-ui/icons/DeleteOutlined`,\n- `Rounded` "theme" is exported as `@material-ui/icons/DeleteRounded`,\n- `Two tone` "theme" is exported as `@material-ui/icons/DeleteTwoTone`,\n- `Sharp` "theme" is exported as `@material-ui/icons/DeleteSharp`.\n\nNote: The Material Design specification names the icons using "snake_case" naming (for example `delete_forever`, `add_a_photo`), while `@material-ui/icons` exports the respective icons using "PascalCase" naming (for example `DeleteForever`, `AddAPhoto`). There are three exceptions to this naming rule: `3d_rotation` exported as `ThreeDRotation`, `4k` exported as `FourK`, and `360` exported as `ThreeSixty`.\n\n{{"demo": "pages/components/icons/SvgMaterialIcons.js"}}\n\n## SvgIcon\n\nIf you need a custom SVG icon (not available in Material Icons) you should use the `SvgIcon` wrapper. The `SvgIcon` component takes the SVG `path` element as its child and converts it to a React component that displays this SVG icon, and allows the icon to be styled and respond to mouse events. SVG elements should be scaled for a 24x24px viewport.\n\nThe resulting icon can be used as is, or included as a child for other Material-UI components that use icons. Par dÃ©faut, une icÃ´ne hÃ©ritera de la couleur de texte actuelle. Vous pouvez Ã©ventuellement dÃ©finir la couleur de l\'icÃ´ne Ã  l\'aide de l\'une des propriÃ©tÃ©s de couleur du thÃ¨me: `primary`, `secondary`, `action`, `error` & `disabled`.\n\n{{"demo": "pages/components/icons/SvgIcons.js"}}\n\n### Libraries\n\n#### Material Design (recommended)\n\nMaterial Design has standardized over [1,000 official icons](#material-icons).\n\n#### MDI\n\n[materialdesignicons.com](https://materialdesignicons.com/) provides over 2,000 icons. For the wanted icon, copy the SVG `path` they provide, and use it as the child of the `SvgIcon` component.\n\nNote: [mdi-material-ui](https://github.com/TeamWertarbyte/mdi-material-ui) has already wrapped each of these SVG icons with the `SvgIcon` component, so you don\'t have to do it yourself.\n\n## Icon (Font icons)\n\nLe composant `Icon` affichera une icÃ´ne Ã  partir de toute police dâ€™icÃ´ne prenant en charge les ligatures. Avant de commencer, vous devez en inclure une, telle que la police [Material icon](https://google.github.io/material-design-icons/#icon-font-for-the-web) dans votre projet, par exemple via Google Web Fonts:\n\n```html\n<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />\n```\n\n`Icon` will set the correct class name for the Material icon font. For other fonts, you must supply the class name using the Icon component\'s `className` property.\n\nPour utiliser une icÃ´ne, enveloppez simplement le nom de l\'icÃ´ne (ligature de police) avec le composant `Icon` , par exemple:\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\n\n<Icon>star</Icon>\n```\n\nPar dÃ©faut, une icÃ´ne hÃ©ritera de la couleur de texte actuelle. Vous pouvez Ã©ventuellement dÃ©finir la couleur de l\'icÃ´ne Ã  l\'aide de l\'une des propriÃ©tÃ©s de couleur du thÃ¨me: `primary`, `secondary`, `action`, `error` & `disabled`.\n\n### IcÃ´nes de police Material\n\n{{"demo": "pages/components/icons/Icons.js"}}\n\n### Font Awesome\n\n[Font Awesome](https://fontawesome.com/icons) Peut Ãªtre utilisÃ© avec le composant `Icon` comme suit:\n\n{{"demo": "pages/components/icons/FontAwesome.js", "hideEditButton": true}}\n\n## Font vs SVG. Which approach to use?\n\nLes deux approches fonctionnent bien, cependant, il existe quelques diffÃ©rences subtiles, notamment en termes de performances et de qualitÃ© de rendu. Lorsque cela est possible, Le SVG est prÃ©fÃ©rable car il permet la division de code, prend en charge plus d\'icÃ´nes, rend les rendus plus rapidement et mieux.\n\nPour plus de dÃ©tails, vous pouvez voir [pourquoi GitHub a migrÃ© d\'icÃ´nes de police en icÃ´nes SVG](https://github.blog/2016-02-22-delivering-octicons-with-svg/).\n\n## AccessibilitÃ©\n\nLes icÃ´nes peuvent transmettre toutes sortes d\'informations utiles. Il est donc important qu\'elles atteignent le plus grand nombre de personnes possible. There are two use cases youâ€™ll want to consider:\n- **Decorative Icons** are only being used for visual or branding reinforcement. If they were removed from the page, users would still understand and be able to use your page.\n- **Semantic Icons** are ones that youâ€™re using to convey meaning, rather than just pure decoration. This includes icons without text next to them used as interactive controls â€” buttons, form elements, toggles, etc.\n\n### IcÃ´nes SVG dÃ©coratives\n\nIf your icons are purely decorative, youâ€™re already done! The `aria-hidden=true` attribute is added so that your icons are properly accessible (invisible).\n\n### IcÃ´nes SVG sÃ©mantiques\n\nSi votre icÃ´ne a une signification sÃ©mantique, il vous suffit d\'ajouter une propriÃ©tÃ© `titleAccess = "meaning"` . The `role="img"` attribute and the `<title>` element are added so that your icons are properly accessible.\n\nDans le cas d\'Ã©lÃ©ments interactifs "focusable", comme avec un bouton icÃ´ne, vous pouvez utiliser la propriÃ©tÃ© `aria-label`:\n\n```jsx\nimport IconButton from \'@material-ui/core/IconButton\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\n// ...\n\n<IconButton aria-label="delete">\n  <SvgIcon>\n    <path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" />\n  </SvgIcon>\n</IconButton>\n```\n\n### IcÃ´nes de polices dÃ©coratives\n\nIf your icons are purely decorative, youâ€™re already done! The `aria-hidden=true` attribute is added so that your icons are properly accessible (invisible).\n\n### IcÃ´nes de polices sÃ©mantiques\n\nSi vos icÃ´nes ont un sens sÃ©mantique, vous devez fournir une alternative textuelle uniquement visible aux technologies d\'assistance.\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\nimport Typography from \'@material-ui/core/Typography\';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Typography variant="srOnly">CrÃ©ez un utilisateur</Typography>\n```\n\n### RÃ©fÃ©rence\n\n- https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/\n' },
        MJOR: function(e, n, o) {
            "use strict";
            o.r(n), o.d(n, "default", function() { return v });
            var t = o("mXGw"),
                a = o.n(t),
                r = o("yZEQ"),
                i = o("Px1Q"),
                s = o("GeB9"),
                c = o("6dYU"),
                l = Object(r.a)(function(e) { return { root: { "& > svg": { margin: e.spacing(2) } }, iconHover: { "&:hover": { color: i.a[800] } } } }),
                d = a.a.createElement("path", { d: "M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" });

            function m(e) { return a.a.createElement(c.a, e, d) }
            var u = a.a.createElement(m, null),
                p = a.a.createElement(m, { color: "primary" }),
                h = a.a.createElement(m, { color: "secondary" }),
                f = a.a.createElement(m, { color: "action" }),
                g = a.a.createElement(m, { color: "disabled", fontSize: "large" });

            function v() { var e = l(); return a.a.createElement("div", { className: e.root }, u, p, h, f, a.a.createElement(m, { className: e.iconHover, color: "error", style: { fontSize: 30 } }), g, a.a.createElement(m, { color: "primary", fontSize: "large", component: function(e) { return a.a.createElement("svg", e, a.a.createElement("defs", null, a.a.createElement("linearGradient", { id: "gradient1" }, a.a.createElement("stop", { offset: "30%", stopColor: s.a[400] }), a.a.createElement("stop", { offset: "70%", stopColor: i.a[400] }))), a.a.cloneElement(e.children[0], { fill: "url(#gradient1)" })) } })) }
        },
        "N+6P": function(e, n, o) {
            "use strict";
            var t = o("mXGw"),
                a = o.n(t),
                r = o("0Zz2");
            n.a = Object(r.a)(a.a.createElement("path", { d: "M7.52 21.48C4.25 19.94 1.91 16.76 1.55 13H.05C.56 19.16 5.71 24 12 24l.66-.03-3.81-3.81-1.33 1.32zm.89-6.52c-.19 0-.37-.03-.52-.08-.16-.06-.29-.13-.4-.24-.11-.1-.2-.22-.26-.37-.06-.14-.09-.3-.09-.47h-1.3c0 .36.07.68.21.95.14.27.33.5.56.69.24.18.51.32.82.41.3.1.62.15.96.15.37 0 .72-.05 1.03-.15.32-.1.6-.25.83-.44s.42-.43.55-.72c.13-.29.2-.61.2-.97 0-.19-.02-.38-.07-.56-.05-.18-.12-.35-.23-.51-.1-.16-.24-.3-.4-.43-.17-.13-.37-.23-.61-.31.2-.09.37-.2.52-.33.15-.13.27-.27.37-.42.1-.15.17-.3.22-.46.05-.16.07-.32.07-.48 0-.36-.06-.68-.18-.96-.12-.28-.29-.51-.51-.69-.2-.19-.47-.33-.77-.43C9.1 8.05 8.76 8 8.39 8c-.36 0-.69.05-1 .16-.3.11-.57.26-.79.45-.21.19-.38.41-.51.67-.12.26-.18.54-.18.85h1.3c0-.17.03-.32.09-.45s.14-.25.25-.34c.11-.09.23-.17.38-.22.15-.05.3-.08.48-.08.4 0 .7.1.89.31.19.2.29.49.29.86 0 .18-.03.34-.08.49-.05.15-.14.27-.25.37-.11.1-.25.18-.41.24-.16.06-.36.09-.58.09H7.5v1.03h.77c.22 0 .42.02.6.07s.33.13.45.23c.12.11.22.24.29.4.07.16.1.35.1.57 0 .41-.12.72-.35.93-.23.23-.55.33-.95.33zm8.55-5.92c-.32-.33-.7-.59-1.14-.77-.43-.18-.92-.27-1.46-.27H12v8h2.3c.55 0 1.06-.09 1.51-.27.45-.18.84-.43 1.16-.76.32-.33.57-.73.74-1.19.17-.47.26-.99.26-1.57v-.4c0-.58-.09-1.1-.26-1.57-.18-.47-.43-.87-.75-1.2zm-.39 3.16c0 .42-.05.79-.14 1.13-.1.33-.24.62-.43.85-.19.23-.43.41-.71.53-.29.12-.62.18-.99.18h-.91V9.12h.97c.72 0 1.27.23 1.64.69.38.46.57 1.12.57 1.99v.4zM12 0l-.66.03 3.81 3.81 1.33-1.33c3.27 1.55 5.61 4.72 5.96 8.48h1.5C23.44 4.84 18.29 0 12 0z" }), "ThreeDRotation")
        },
        Oa72: function(e, n) { e.exports = '---\ntitle: Icon ã‚³ãƒ³ãƒãƒ¼ãƒãƒ³ãƒˆ\ncomponents: Icon, SvgIcon\n---\n\n# Icons\n\n<p class="description">Material-UIã§ã‚¢ã‚¤ã‚³ãƒ³ã‚’ä½¿ç”¨ã™ã‚‹ãŸã‚ã®ã‚¬ã‚¤ãƒ€ãƒ³ã‚¹ã¨ææ¡ˆã§ã™ã€‚</p>\n\nMaterial-UI provides icons support in three ways:\n\n1. Standardized [Material Design icons](#material-icons) exported as React components (SVG icons).\n1. With the [SvgIcon](#svgicon) component, a React wrapper for custom SVG icons.\n1. With the [Icon](#icon-font-icons) component, a React wrapper for custom font icons.\n\n## Material Icons\n\nMaterial Design has standardized over 1,000 official icons, each in five different "themes" (see below). For each SVG icon, we export the respective React component from the `@material-ui/icons` package. You can search the full list of these icons in our [built-in search page](/components/material-icons/).\n\n### ä½¿ã„æ–¹\n\nInstall `@material-ui/icons`. Import icons using one of these two options:\n\n- Option 1:\n\n  ```jsx\n  import AccessAlarmIcon from \'@material-ui/icons/AccessAlarm\';\n  import ThreeDRotation from \'@material-ui/icons/ThreeDRotation\';\n  ```\n\n- Option 2:\n\n  ```jsx\n  import { AccessAlarm, ThreeDRotation } from \'@material-ui/icons\';\n  ```\n\nThe safest is Option 1 but Option 2 can yield the best developer experience. Make sure you follow the [minimizing bundle size guide](/guides/minimizing-bundle-size/#option-2) before using the second approach. The configuration of a Babel plugin is encouraged.\n\nEach icon also has a "theme": `Filled` (default), `Outlined`, `Rounded`, `Two tone` and `Sharp`. If you want to import the icon component with a "theme" different than default, append the "theme" name to the icon name. For example `@material-ui/icons/Delete` icon with:\n\n- `Filled` "theme" (default) is exported as `@material-ui/icons/Delete`,\n- `Outlined` "theme" is exported as `@material-ui/icons/DeleteOutlined`,\n- `Rounded` "theme" is exported as `@material-ui/icons/DeleteRounded`,\n- `Two tone` "theme" is exported as `@material-ui/icons/DeleteTwoTone`,\n- `Sharp` "theme" is exported as `@material-ui/icons/DeleteSharp`.\n\nNote: The Material Design specification names the icons using "snake_case" naming (for example `delete_forever`, `add_a_photo`), while `@material-ui/icons` exports the respective icons using "PascalCase" naming (for example `DeleteForever`, `AddAPhoto`). There are three exceptions to this naming rule: `3d_rotation` exported as `ThreeDRotation`, `4k` exported as `FourK`, and `360` exported as `ThreeSixty`.\n\n{{"demo": "pages/components/icons/SvgMaterialIcons.js"}}\n\n## SvgIcon\n\nIf you need a custom SVG icon (not available in Material Icons) you should use the `SvgIcon` wrapper. The `SvgIcon` component takes the SVG `path` element as its child and converts it to a React component that displays this SVG icon, and allows the icon to be styled and respond to mouse events. SVG elements should be scaled for a 24x24px viewport.\n\nThe resulting icon can be used as is, or included as a child for other Material-UI components that use icons. ãƒ‡ãƒ•ã‚©ãƒ«ãƒˆã§ã¯ã€ã‚¢ã‚¤ã‚³ãƒ³ã¯ç¾åœ¨ã®ãƒ†ã‚­ã‚¹ãƒˆã®è‰²ã‚’ç¶™æ‰¿ã—ã¾ã™ã€‚ å¿…è¦ã«å¿œã˜ã¦ã€ãƒ†ãƒ¼ãƒžã®è‰²ç‰¹æ€§ã®ã„ãšã‚Œã‹ã‚’ä½¿ç”¨ã—ã¦ã€ã‚¢ã‚¤ã‚³ãƒ³ã®è‰²ã‚’è¨­å®šã™ã‚‹ã“ã¨ãŒã§ãã¾ã™ã€‚ï¼š `primary`, `secondary`, `action`, `error` & `disabled`.\n\n{{"demo": "pages/components/icons/SvgIcons.js"}}\n\n### Libraries\n\n#### Material Design (recommended)\n\nMaterial Design has standardized over [1,000 official icons](#material-icons).\n\n#### MDI\n\n[materialdesignicons.com](https://materialdesignicons.com/) provides over 2,000 icons. For the wanted icon, copy the SVG `path` they provide, and use it as the child of the `SvgIcon` component.\n\nNote: [mdi-material-ui](https://github.com/TeamWertarbyte/mdi-material-ui) has already wrapped each of these SVG icons with the `SvgIcon` component, so you don\'t have to do it yourself.\n\n## Icon (Font icons)\n\n`Icon` ã‚³ãƒ³ãƒãƒ¼ãƒãƒ³ãƒˆã¯ã€åˆå­—ã‚’ã‚µãƒãƒ¼ãƒˆã™ã‚‹ä»»æ„ã®ã‚¢ã‚¤ã‚³ãƒ³ãƒ•ã‚©ãƒ³ãƒˆã®ã‚¢ã‚¤ã‚³ãƒ³ã‚’è¡¨ç¤ºã§ãã¾ã™ã€‚ å‰ææ¡ä»¶ã¨ã—ã¦ã€ãŸã¨ãˆã°ã€Google Web Fontsã‚’ä»‹ã—ã¦ã€ [Material icon font](https://google.github.io/material-design-icons/#icon-font-for-the-web) ãƒ—ãƒ­ã‚¸ã‚§ã‚¯ãƒˆã‚’ãƒ—ãƒ­ã‚¸ã‚§ã‚¯ãƒˆã«å«ã‚ã‚‹å¿…è¦ãŒã‚ã‚Šã¾ã™ã€‚\n\n```html\n<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />\n```\n\n`Icon` will set the correct class name for the Material icon font. For other fonts, you must supply the class name using the Icon component\'s `className` property.\n\nTo use an icon simply wrap the icon name (font ligature) with the `Icon` component, for example:\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\n\n<Icon>star</Icon>\n```\n\nãƒ‡ãƒ•ã‚©ãƒ«ãƒˆã§ã¯ã€ã‚¢ã‚¤ã‚³ãƒ³ã¯ç¾åœ¨ã®ãƒ†ã‚­ã‚¹ãƒˆã®è‰²ã‚’ç¶™æ‰¿ã—ã¾ã™ã€‚ å¿…è¦ã«å¿œã˜ã¦ã€ãƒ†ãƒ¼ãƒžã®è‰²ç‰¹æ€§ã®ã„ãšã‚Œã‹ã‚’ä½¿ç”¨ã—ã¦ã€ã‚¢ã‚¤ã‚³ãƒ³ã®è‰²ã‚’è¨­å®šã™ã‚‹ã“ã¨ãŒã§ãã¾ã™ã€‚ï¼š `primary`, `secondary`, `action`, `error` & `disabled`.\n\n### Font Material icons\n\n{{"demo": "pages/components/icons/Icons.js"}}\n\n### Font Awesome\n\n[Font Awesome](https://fontawesome.com/icons) ã¯ã€ `Icon` ã‚³ãƒ³ãƒãƒ¼ãƒãƒ³ãƒˆã¨ã¨ã‚‚ã«ã€æ¬¡ã®ã‚ˆã†ã«ä½¿ç”¨ã™ã‚‹ã“ã¨ãŒã§ãã¾ã™ã€‚\n\n{{"demo": "pages/components/icons/FontAwesome.js", "hideEditButton": true}}\n\n## Font vs SVG. Which approach to use?\n\nã©ã¡ã‚‰ã®æ–¹æ³•ã§ã‚‚å•é¡Œãªãå‹•ä½œã—ã¾ã™ãŒã€ç‰¹ã«ãƒ‘ãƒ•ã‚©ãƒ¼ãƒžãƒ³ã‚¹ã¨ãƒ¬ãƒ³ãƒ€ãƒªãƒ³ã‚°å“è³ªã®ç‚¹ã§ã€ã‚ãšã‹ãªé•ã„ãŒã„ãã¤ã‹ã‚ã‚Šã¾ã™ã€‚ ã‚³ãƒ¼ãƒ‰åˆ†å‰²ã‚’å¯èƒ½ã«ã—ã€ã‚ˆã‚Šå¤šãã®ã‚¢ã‚¤ã‚³ãƒ³ã‚’ã‚µãƒãƒ¼ãƒˆã—ã€ã‚ˆã‚Šé€Ÿãã‚ˆã‚Šè‰¯ããƒ¬ãƒ³ãƒ€ãƒªãƒ³ã‚°ã™ã‚‹ã®ã§ã€å¯èƒ½ãªé™ã‚ŠSVGãŒå„ªå…ˆã•ã‚Œã¾ã™ã€‚\n\nè©³ã—ãã¯ã€[why GitHub migrated from font icons to SVG icons](https://github.blog/2016-02-22-delivering-octicons-with-svg/)ã‚’ã”è¦§ãã ã•ã„ã€‚\n\n## ã‚¢ã‚¯ã‚»ã‚·ãƒ“ãƒªãƒ†ã‚£\n\nã‚¢ã‚¤ã‚³ãƒ³ã¯ã‚ã‚‰ã‚†ã‚‹ç¨®é¡žã®æ„å‘³ã®ã‚ã‚‹æƒ…å ±ã‚’ä¼ãˆã‚‹ã“ã¨ãŒã§ãã‚‹ã®ã§ã€å¯èƒ½ãªé™ã‚Šå¤šãã®äººã«å±Šãã“ã¨ãŒé‡è¦ã§ã™ã€‚ æ¬¡ã®2ã¤ã®ä½¿ç”¨ä¾‹ã‚’æ¤œè¨Žã—ã¦ãã ã•ã„ã€‚\n- **Decorative Icons** are only being used for visual or branding reinforcement. If they were removed from the page, users would still understand and be able to use your page.\n- **Semantic Icons** are ones that youâ€™re using to convey meaning, rather than just pure decoration. This includes icons without text next to them used as interactive controls â€” buttons, form elements, toggles, etc.\n\n### è£…é£¾SVGã‚¢ã‚¤ã‚³ãƒ³\n\nã‚¢ã‚¤ã‚³ãƒ³ãŒç´”ç²‹ã«è£…é£¾çš„ãªã‚‚ã®ã§ã‚ã‚Œã°ã€ã“ã‚Œã§å®Œäº†ã§ã™ã€‚ The `aria-hidden=true` attribute is added so that your icons are properly accessible (invisible).\n\n### Semantic SVG Icons\n\nã‚ãªãŸã®ã‚¢ã‚¤ã‚³ãƒ³ãŒæ„å‘³çš„ãªæ„å‘³ã‚’æŒã£ã¦ã„ã‚‹ãªã‚‰ã€ã‚ãªãŸãŒã™ã‚‹å¿…è¦ãŒã‚ã‚‹ã®ã¯ `titleAccess="meaning"` ãƒ—ãƒ­ãƒ‘ãƒ†ã‚£ã‚’æŠ•å…¥ã™ã‚‹ã“ã¨ã ã‘ã§ã™ã€‚ The `role="img"` attribute and the `<title>` element are added so that your icons are properly accessible.\n\nã‚¢ã‚¤ã‚³ãƒ³ãƒœã‚¿ãƒ³ã¨ä¸€ç·’ã«ä½¿ç”¨ã—ãŸã¨ãã®ã‚ˆã†ã«ãƒ•ã‚©ãƒ¼ã‚«ã‚¹å¯èƒ½ãªã‚¤ãƒ³ã‚¿ãƒ©ã‚¯ãƒ†ã‚£ãƒ–è¦ç´ ã®å ´åˆã¯ã€ `aria-label` ãƒ—ãƒ­ãƒ‘ãƒ†ã‚£ã‚’ä½¿ç”¨ã§ãã¾ã™ã€‚\n\n```jsx\nimport IconButton from \'@material-ui/core/IconButton\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\n// ...\n\n<IconButton aria-label="delete">\n  <SvgIcon>\n    <path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" />\n  </SvgIcon>\n</IconButton>\n```\n\n### Decorative Font Icons\n\nã‚¢ã‚¤ã‚³ãƒ³ãŒç´”ç²‹ã«è£…é£¾çš„ãªã‚‚ã®ã§ã‚ã‚Œã°ã€ã“ã‚Œã§å®Œäº†ã§ã™ã€‚ The `aria-hidden=true` attribute is added so that your icons are properly accessible (invisible).\n\n### Semantic Font Icons\n\nã‚¢ã‚¤ã‚³ãƒ³ã«ã‚»ãƒžãƒ³ãƒ†ã‚£ãƒƒã‚¯ãªæ„å‘³ãŒã‚ã‚‹å ´åˆã€æ”¯æ´æŠ€è¡“ã«ã®ã¿è¡¨ç¤ºã•ã‚Œã‚‹ä»£æ›¿ãƒ†ã‚­ã‚¹ãƒˆã‚’æä¾›ã™ã‚‹å¿…è¦ãŒã‚ã‚Šã¾ã™ã€‚\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\nimport Typography from \'@material-ui/core/Typography\';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Typography variant="srOnly">Create a user</Typography>\n```\n\n### ãƒªãƒ•ã‚¡ãƒ¬ãƒ³ã‚¹\n\n- https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/\n' },
        Ozru: function(e, n, o) {
            "use strict";
            var t = o("mXGw"),
                a = o.n(t),
                r = o("0Zz2");
            n.a = Object(r.a)(a.a.createElement("path", { d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z" }), "Delete")
        },
        Pw6v: function(e, n, o) {
            "use strict";
            var t = o("z3IF"),
                a = o("2Fjn"),
                r = o("mXGw"),
                i = o.n(r),
                s = o("PDtE"),
                c = o("XpU0"),
                l = o("rKPb"),
                d = i.a.forwardRef(function(e, n) {
                    var o = e.classes,
                        r = e.className,
                        c = e.color,
                        d = void 0 === c ? "inherit" : c,
                        m = e.component,
                        u = void 0 === m ? "span" : m,
                        p = e.fontSize,
                        h = void 0 === p ? "default" : p,
                        f = Object(a.a)(e, ["classes", "className", "color", "component", "fontSize"]);
                    return i.a.createElement(u, Object(t.default)({ className: Object(s.a)("material-icons", o.root, r, "inherit" !== d && o["color".concat(Object(l.a)(d))], "default" !== h && o["fontSize".concat(Object(l.a)(h))]), "aria-hidden": !0, ref: n }, f))
                });
            d.muiName = "Icon", n.a = Object(c.default)(function(e) { return { root: { userSelect: "none", fontSize: e.typography.pxToRem(24), width: "1em", height: "1em", overflow: "hidden", flexShrink: 0 }, colorPrimary: { color: e.palette.primary.main }, colorSecondary: { color: e.palette.secondary.main }, colorAction: { color: e.palette.action.active }, colorError: { color: e.palette.error.main }, colorDisabled: { color: e.palette.action.disabled }, fontSizeInherit: { fontSize: "inherit" }, fontSizeSmall: { fontSize: e.typography.pxToRem(20) }, fontSizeLarge: { fontSize: e.typography.pxToRem(36) } } }, { name: "MuiIcon" })(d)
        },
        QlLI: function(e, n, o) {
            "use strict";
            o.r(n), o.d(n, "default", function() { return A });
            var t = o("mXGw"),
                a = o.n(t),
                r = o("pQ8Y"),
                i = o("Oy88"),
                s = o("Ozru"),
                c = o("U6S3"),
                l = o("sH+W"),
                d = o("zg0K"),
                m = o("9Zx2"),
                u = o("vR0R"),
                p = o("yvuJ"),
                h = o("qZQ6"),
                f = o("Tjoj"),
                g = o("JgRu"),
                v = o("N+6P"),
                y = o("hyOX"),
                I = o("/W3I"),
                w = o("yZEQ"),
                S = o("WLtd"),
                b = Object(w.a)(function(e) { return Object(S.a)({ root: { color: e.palette.text.primary } }) }),
                x = a.a.createElement(r.a, { item: !0, xs: 4 }, a.a.createElement(i.a, null, "Filled")),
                T = a.a.createElement(r.a, { item: !0, xs: 8 }, a.a.createElement(s.a, null), a.a.createElement(u.a, null)),
                D = a.a.createElement(r.a, { item: !0, xs: 4 }, a.a.createElement(i.a, null, "Outlined")),
                G = a.a.createElement(r.a, { item: !0, xs: 8 }, a.a.createElement(c.a, null), a.a.createElement(p.a, null)),
                E = a.a.createElement(r.a, { item: !0, xs: 4 }, a.a.createElement(i.a, null, "Rounded")),
                z = a.a.createElement(r.a, { item: !0, xs: 8 }, a.a.createElement(l.a, null), a.a.createElement(h.a, null)),
                M = a.a.createElement(r.a, { item: !0, xs: 4 }, a.a.createElement(i.a, null, "Two Tone")),
                F = a.a.createElement(r.a, { item: !0, xs: 8 }, a.a.createElement(d.a, null), a.a.createElement(f.a, null)),
                j = a.a.createElement(r.a, { item: !0, xs: 4 }, a.a.createElement(i.a, null, "Sharp")),
                R = a.a.createElement(r.a, { item: !0, xs: 8 }, a.a.createElement(m.a, null), a.a.createElement(g.a, null)),
                V = a.a.createElement(r.a, { item: !0, xs: 4 }, a.a.createElement(i.a, null, "Edge-cases")),
                O = a.a.createElement(r.a, { item: !0, xs: 8 }, a.a.createElement(v.a, null), a.a.createElement(y.a, null), a.a.createElement(I.a, null));

            function A() { var e = b(); return a.a.createElement(r.a, { container: !0, className: e.root }, x, T, D, G, E, z, M, F, j, R, V, O) }
        },
        RGRV: function(e, n, o) {
            "use strict";
            o.r(n), o.d(n, "default", function() { return l });
            var t = o("mXGw"),
                a = o.n(t),
                r = o("e+1t"),
                i = o("fZEv"),
                s = o("qhhg"),
                c = a.a.createElement(r.a, { req: i, reqSource: s, reqPrefix: "pages/components/icons" });

            function l() { return c }
        },
        Tjoj: function(e, n, o) {
            "use strict";
            var t = o("mXGw"),
                a = o.n(t),
                r = o("0Zz2");
            n.a = Object(r.a)(a.a.createElement(a.a.Fragment, null, a.a.createElement("path", { d: "M16 9H8v10h8V9zm-.47 7.12l-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12 1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12z", opacity: ".3" }), a.a.createElement("path", { d: "M14.12 10.47L12 12.59l-2.13-2.12-1.41 1.41L10.59 14l-2.12 2.12 1.41 1.41L12 15.41l2.12 2.12 1.41-1.41L13.41 14l2.12-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4zM6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM8 9h8v10H8V9z" })), "DeleteForeverTwoTone")
        },
        U6S3: function(e, n, o) {
            "use strict";
            var t = o("mXGw"),
                a = o.n(t),
                r = o("0Zz2");
            n.a = Object(r.a)(a.a.createElement("path", { d: "M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z" }), "DeleteOutlined")
        },
        WLtd: function(e, n, o) {
            "use strict";

            function t(e) { return function(e) { return e }(e) }
            o.d(n, "a", function() { return t })
        },
        WmEI: function(e, n) { e.exports = '---\ntitle: React Icon Component\ncomponents: Icon, SvgIcon\n---\n\n# Icons\n\n<p class="description">Anleitungen und VorschlÃ¤ge fÃ¼r die Verwendung von Symbolen mit der Material-UI.</p>\n\nMaterial-UI provides icons support in three ways:\n\n1. Standardized [Material Design icons](#material-icons) exported as React components (SVG icons).\n1. With the [SvgIcon](#svgicon) component, a React wrapper for custom SVG icons.\n1. With the [Icon](#icon-font-icons) component, a React wrapper for custom font icons.\n\n## Material Icons\n\nMaterial Design has standardized over 1,000 official icons, each in five different "themes" (see below). For each SVG icon, we export the respective React component from the `@material-ui/icons` package. You can search the full list of these icons in our [built-in search page](/components/material-icons/).\n\n### Nutzung\n\nInstall `@material-ui/icons`. Import icons using one of these two options:\n\n- Option 1:\n\n  ```jsx\n  import AccessAlarmIcon from \'@material-ui/icons/AccessAlarm\';\n  import ThreeDRotation from \'@material-ui/icons/ThreeDRotation\';\n  ```\n\n- Option 2:\n\n  ```jsx\n  import { AccessAlarm, ThreeDRotation } from \'@material-ui/icons\';\n  ```\n\nThe safest is Option 1 but Option 2 can yield the best developer experience. Make sure you follow the [minimizing bundle size guide](/guides/minimizing-bundle-size/#option-2) before using the second approach. The configuration of a Babel plugin is encouraged.\n\nEach icon also has a "theme": `Filled` (default), `Outlined`, `Rounded`, `Two tone` and `Sharp`. If you want to import the icon component with a "theme" different than default, append the "theme" name to the icon name. For example `@material-ui/icons/Delete` icon with:\n\n- `Filled` "theme" (default) is exported as `@material-ui/icons/Delete`,\n- `Outlined` "theme" is exported as `@material-ui/icons/DeleteOutlined`,\n- `Rounded` "theme" is exported as `@material-ui/icons/DeleteRounded`,\n- `Two tone` "theme" is exported as `@material-ui/icons/DeleteTwoTone`,\n- `Sharp` "theme" is exported as `@material-ui/icons/DeleteSharp`.\n\nNote: The Material Design specification names the icons using "snake_case" naming (for example `delete_forever`, `add_a_photo`), while `@material-ui/icons` exports the respective icons using "PascalCase" naming (for example `DeleteForever`, `AddAPhoto`). There are three exceptions to this naming rule: `3d_rotation` exported as `ThreeDRotation`, `4k` exported as `FourK`, and `360` exported as `ThreeSixty`.\n\n{{"demo": "pages/components/icons/SvgMaterialIcons.js"}}\n\n## SvgIcon\n\nIf you need a custom SVG icon (not available in Material Icons) you should use the `SvgIcon` wrapper. The `SvgIcon` component takes the SVG `path` element as its child and converts it to a React component that displays this SVG icon, and allows the icon to be styled and respond to mouse events. SVG elements should be scaled for a 24x24px viewport.\n\nThe resulting icon can be used as is, or included as a child for other Material-UI components that use icons. StandardmÃ¤ÃŸig erbt ein Symbol die aktuelle Textfarbe. Optional kÃ¶nnen Sie die Farbe des Symbols mithilfe einer der Designfarbeneigenschaften festlegen: `primary`, `secondary`, `action`, `error` & `disabled`.\n\n{{"demo": "pages/components/icons/SvgIcons.js"}}\n\n### Libraries\n\n#### Material Design (recommended)\n\nMaterial Design has standardized over [1,000 official icons](#material-icons).\n\n#### MDI\n\n[materialdesignicons.com](https://materialdesignicons.com/) provides over 2,000 icons. For the wanted icon, copy the SVG `path` they provide, and use it as the child of the `SvgIcon` component.\n\nNote: [mdi-material-ui](https://github.com/TeamWertarbyte/mdi-material-ui) has already wrapped each of these SVG icons with the `SvgIcon` component, so you don\'t have to do it yourself.\n\n## Icon (Font icons)\n\nDie `Symbol-` Komponente zeigt ein Symbol aus einer beliebigen Symbolschriftart an, die Ligaturen unterstÃ¼tzt. Voraussetzung ist, dass Sie eine, beispielsweise die [Material Icon-Schriftart](https://google.github.io/material-design-icons/#icon-font-for-the-web) in Ihr Projekt einfÃ¼gen, beispielsweise Ã¼ber Google Web Fonts:\n\n```html\n<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />\n```\n\n`Icon` will set the correct class name for the Material icon font. For other fonts, you must supply the class name using the Icon component\'s `className` property.\n\nUm ein Symbol zu verwenden, wickeln Sie einfach das Symbol Namen (Schrift Ligatur) mit der `Icon` Komponente zum Beispiel:\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\n\n<Icon>star</Icon>\n```\n\nStandardmÃ¤ÃŸig erbt ein Symbol die aktuelle Textfarbe. Optional kÃ¶nnen Sie die Farbe des Symbols mithilfe einer der Designfarbeneigenschaften festlegen: `primary`, `secondary`, `action`, `error` & `disabled`.\n\n### Schriftart Material icons\n\n{{"demo": "pages/components/icons/Icons.js"}}\n\n### Font Awesome\n\n[Font Awesome](https://fontawesome.com/icons) kann wie folgt mit der Komponente `Icon` werden:\n\n{{"demo": "pages/components/icons/FontAwesome.js", "hideEditButton": true}}\n\n## Font vs SVG. Which approach to use?\n\nBeide AnsÃ¤tze funktionieren gut, es gibt jedoch einige geringfÃ¼gige Unterschiede, insbesondere hinsichtlich der Leistung und der RenderqualitÃ¤t. Wann immer mÃ¶glich, wird SVG bevorzugt, da es die Codeaufteilung ermÃ¶glicht, mehr Symbole unterstÃ¼tzt und schneller und besser rendert.\n\nWeitere Informationen finden Sie unter [warum GitHub von Zeichensymbolen zu SVG-Symbolen migrierte](https://github.blog/2016-02-22-delivering-octicons-with-svg/).\n\n## Barrierefreiheit\n\nIcons kÃ¶nnen alle Arten von aussagekrÃ¤ftigen Informationen vermitteln, daher ist es wichtig, dass sie die grÃ¶ÃŸtmÃ¶gliche Anzahl von Personen erreichen. There are two use cases youâ€™ll want to consider:\n- **Decorative Icons** are only being used for visual or branding reinforcement. If they were removed from the page, users would still understand and be able to use your page.\n- **Semantic Icons** are ones that youâ€™re using to convey meaning, rather than just pure decoration. This includes icons without text next to them used as interactive controls â€” buttons, form elements, toggles, etc.\n\n### Dekorative SVG-Symbole\n\nIf your icons are purely decorative, youâ€™re already done! The `aria-hidden=true` attribute is added so that your icons are properly accessible (invisible).\n\n### Semantic SVG Symbole\n\nWenn Ihr Symbol semantische Bedeutung hat, alles, was Sie tun mÃ¼ssen, ist das HinzufÃ¼gen der `titleAccess=â€žBedeutungâ€œ` Eigenschaft. The `role="img"` attribute and the `<title>` element are added so that your icons are properly accessible.\n\nBei fokussierbaren interaktiven Elementen kÃ¶nnen Sie, wie bei der Verwendung einer SymbolschaltflÃ¤che, die Eigenschaft `aria-label` benutzen:\n\n```jsx\nimport IconButton from \'@material-ui/core/IconButton\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\n// ...\n\n<IconButton aria-label="delete">\n  <SvgIcon>\n    <path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" />\n  </SvgIcon>\n</IconButton>\n```\n\n### Dekorative Schrift-Symbole\n\nIf your icons are purely decorative, youâ€™re already done! The `aria-hidden=true` attribute is added so that your icons are properly accessible (invisible).\n\n### Semantic Font Symbole\n\nWenn Ihre Symbole eine semantische Bedeutung haben, mÃ¼ssen Sie eine Textalternative bereitstellen, die nur fÃ¼r assistive Technologien sichtbar ist.\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\nimport Typography from \'@material-ui/core/Typography\';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Typography variant="srOnly">Erstellen Sie einen Benutzer</Typography>\n```\n\n### Referenz\n\n- https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/\n' },
        fTFQ: function(e, n) { e.exports = "import React from 'react';\nimport clsx from 'clsx';\nimport { loadCSS } from 'fg-loadcss';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\nimport Icon from '@material-ui/core/Icon';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '& > .fa': {\n        margin: theme.spacing(2),\n      },\n    },\n    iconHover: {\n      margin: theme.spacing(2),\n      '&:hover': {\n        color: red[800],\n      },\n    },\n  }),\n);\n\nexport default function FontAwesome() {\n  const classes = useStyles();\n\n  React.useEffect(() => {\n    loadCSS(\n      'https://use.fontawesome.com/releases/v5.1.0/css/all.css',\n      document.querySelector('#font-awesome-css'),\n    );\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <Icon className=\"fa fa-plus-circle\" />\n      <Icon className=\"fa fa-plus-circle\" color=\"primary\" />\n      <Icon className=\"fa fa-plus-circle\" color=\"secondary\" />\n      <Icon className=\"fa fa-plus-circle\" color=\"action\" />\n      <Icon\n        className={clsx(classes.iconHover, 'fa fa-plus-circle')}\n        color=\"error\"\n        style={{ fontSize: 30 }}\n      />\n      <Icon className=\"fa fa-plus-circle\" color=\"disabled\" fontSize=\"large\" />\n    </div>\n  );\n}\n" },
        fZEv: function(e, n, o) {
            var t = { "./FontAwesome.js": "wkti", "./FontAwesome.tsx": "ycuu", "./Icons.js": "njkh", "./Icons.tsx": "s1bu", "./SvgIcons.js": "MJOR", "./SvgIcons.tsx": "pP3L", "./SvgMaterialIcons.js": "GMu4", "./SvgMaterialIcons.tsx": "QlLI", "./icons-aa.md": "79ed", "./icons-de.md": "WmEI", "./icons-es.md": "9mqe", "./icons-fr.md": "M8cl", "./icons-ja.md": "Oa72", "./icons-pt.md": "fyFO", "./icons-ru.md": "lWqO", "./icons-zh.md": "yyYl", "./icons.md": "n8Vp" };

            function a(e) { var n = r(e); return o(n) }

            function r(e) { var n = t[e]; if (!(n + 1)) { var o = new Error("Cannot find module '" + e + "'"); throw o.code = "MODULE_NOT_FOUND", o } return n }
            a.keys = function() { return Object.keys(t) }, a.resolve = r, e.exports = a, a.id = "fZEv"
        },
        fyFO: function(e, n) { e.exports = '---\ntitle: Componente React para Ãcones\ncomponents: Icon, SvgIcon\n---\n\n# Ãcones\n\n<p class="description">OrientaÃ§Ã£o e sugestÃµes para usar Ã­cones com o Material-UI.</p>\n\nMaterial-UI fornece suporte de Ã­cones de trÃªs maneiras:\n\n1. Ãcones padronizados [Material Design](#material-icons) exportados como componentes do React (Ã­cones SVG).\n1. Com o componente [SvgIcon](#svgicon), um wrapper React para Ã­cones SVG personalizados.\n1. Com o componente [Icon](#icon-font-icons), um wrapper React para Ã­cones de fonte personalizados.\n\n## Ãcones Material\n\nO Material Design padronizou mais de 1.000 Ã­cones oficiais, cada um em cinco "temas" diferentes (veja abaixo). Para cada Ã­cone SVG, exportamos o respectivo componente React do pacote `@material-ui/icons`. VocÃª pode pesquisar a lista completa desses Ã­cones em nossa [pÃ¡gina de pesquisa incorporada](/components/material-icons/).\n\n### UtilizaÃ§Ã£o\n\nInstale `@material-ui/icons`. Importe Ã­cones usando uma destas duas opÃ§Ãµes:\n\n- OpÃ§Ã£o 1:\n\n  ```jsx\n  import AccessAlarmIcon from \'@material-ui/icons/AccessAlarm\';\n  import ThreeDRotation from \'@material-ui/icons/ThreeDRotation\';\n  ```\n\n- OpÃ§Ã£o 2:\n\n  ```jsx\n  import { AccessAlarm, ThreeDRotation } from \'@material-ui/icons\';\n  ```\n\nO mais seguro Ã© a OpÃ§Ã£o 1, mas a OpÃ§Ã£o 2 pode proporcionar uma melhor experiÃªncia para o desenvolvedor. Certifique-se de seguir o guia [minimizando o tamanho do pacote](/guides/minimizing-bundle-size/#option-2) antes de usar a segunda abordagem. A configuraÃ§Ã£o de um plugin Babel Ã© recomendada.\n\nCada Ã­cone possui tambÃ©m um "tema": `Filled` (padrÃ£o), `Outlined`, `Rounded`, `Two tone` e `Sharp`. Se vocÃª deseja importar o componente do Ã­cone com um "tema" diferente do padrÃ£o, acrescente o nome do "tema" ao nome do Ã­cone. Por exemplo, para usar o Ã­cone `@material-ui/icons/Delete`, temos:\n\n- "Tema" `Filled` (preenchido) (padrÃ£o) Ã© exportado como `@material-ui/icons/Delete`,\n- "Tema" `Outlined` (contornado) Ã© exportado como `@material-ui/icons/DeleteOutlined`,\n- "Tema" `Rounded` (arredondado) Ã© exportado como `@material-ui/icons/DeleteRounded`,\n- "Tema" `Two tone` (dois tons) Ã© exportado como `@material-ui/icons/DeleteTwoTone`,\n- "Tema" `Sharp` (pontiagudo) Ã© exportado como `@material-ui/icons/DeleteSharp`.\n\nNota: A especificaÃ§Ã£o Material Design nomeia os Ã­cones usando a nomeaÃ§Ã£o "snake_case" (por exemplo, `delete_forever`, `add_a_photo`), enquanto `@material-ui/icons` exporta os respectivos Ã­cones usando a nomeaÃ§Ã£o "PascalCase" (por exemplo `DeleteForever`, `AddAPhoto`). HÃ¡ trÃªs exceÃ§Ãµes a essa regra de nomenclatura: `3d_rotation` exportado como `ThreeDRotation`, `4k` exportado como `FourK`e `360` exportado como `ThreeSixty`.\n\n{{"demo": "pages/components/icons/SvgMaterialIcons.js"}}\n\n## Ãcones SVG\n\nIf you need a custom SVG icon (not available in Material Icons) you should use the `SvgIcon` wrapper. The `SvgIcon` component takes the SVG `path` element as its child and converts it to a React component that displays this SVG icon, and allows the icon to be styled and respond to mouse events. SVG elements should be scaled for a 24x24px viewport.\n\nThe resulting icon can be used as is, or included as a child for other Material-UI components that use icons. Por padrÃ£o, um Ã­cone herdarÃ¡ a cor do texto atual. Opcionalmente, vocÃª pode definir a cor do Ã­cone usando uma das propriedades de cor do tema: `primary`, `secondary`, `action`, `erro` & `disabled`.\n\n{{"demo": "pages/components/icons/SvgIcons.js"}}\n\n### Libraries\n\n#### Material Design (recommended)\n\nMaterial Design has standardized over [1,000 official icons](#material-icons).\n\n#### MDI\n\n[materialdesignicons.com](https://materialdesignicons.com/) provides over 2,000 icons. For the wanted icon, copy the SVG `path` they provide, and use it as the child of the `SvgIcon` component.\n\nNote: [mdi-material-ui](https://github.com/TeamWertarbyte/mdi-material-ui) has already wrapped each of these SVG icons with the `SvgIcon` component, so you don\'t have to do it yourself.\n\n## Icon (Font icons)\n\nO componente `Icon` exibirÃ¡ um Ã­cone de qualquer fonte de Ã­cone que suporte ligadura tipogrÃ¡fica (ligatures). Como prÃ©-requisito, vocÃª deve incluir a fonte [Material icon](https://google.github.io/material-design-icons/#icon-font-for-the-web) no seu projeto, por exemplo, via Google Web Fonts:\n\n```html\n<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />\n```\n\n`Icon` definirÃ¡ o nome correto da classe para a fonte do Ã­cone Material. Para outras fontes, vocÃª deve fornecer o nome da classe usando a propriedade `className` do componente Ã­cone.\n\nPara usar um Ã­cone, simplesmente coloque o nome do Ã­cone (font ligature) com o componente `Icon`, por exemplo:\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\n\n<Icon>star</Icon>\n```\n\nPor padrÃ£o, um Ã­cone herdarÃ¡ a cor do texto atual. Opcionalmente, vocÃª pode definir a cor do Ã­cone usando uma das propriedades de cor do tema: `primary`, `secondary`, `action`, `erro` & `disabled`.\n\n### Fonte Material icons\n\n{{"demo": "pages/components/icons/Icons.js"}}\n\n### Font Awesome\n\n[Fonte Awesome](https://fontawesome.com/icons) pode ser usada com o componente `Icon` da seguinte forma:\n\n{{"demo": "pages/components/icons/FontAwesome.js", "hideEditButton": true}}\n\n## Fonte vs SVG. Qual abordagem usar?\n\nAmbas as abordagens funcionam bem, no entanto, existem algumas diferenÃ§as sutis, especialmente em termos de desempenho e qualidade de renderizaÃ§Ã£o. Sempre que possÃ­vel, utlize o SVG, pois permite a divisÃ£o do cÃ³digo, suporta mais Ã­cones, renderiza mais rÃ¡pido e melhor.\n\nPara maiores detalhes, vocÃª pode conferir [porque o GitHub migrou Ã­cones de fonte para Ã­cones SVG](https://github.blog/2016-02-22-delivering-octicons-with-svg/).\n\n## Acessibilidade\n\nOs Ã­cones podem transmitir todos os tipos de informaÃ§Ãµes significativas, por isso Ã© importante que eles alcancem a maior quantidade possÃ­vel de pessoas. HÃ¡ dois casos de uso que vocÃª deve considerar:\n- **Decorative Icons** are only being used for visual or branding reinforcement. If they were removed from the page, users would still understand and be able to use your page.\n- **Semantic Icons** are ones that youâ€™re using to convey meaning, rather than just pure decoration. This includes icons without text next to them used as interactive controls â€” buttons, form elements, toggles, etc.\n\n### Ãcones SVG Decorativos\n\nSe seus Ã­cones sÃ£o puramente decorativos, vocÃª jÃ¡ terminou! The `aria-hidden=true` attribute is added so that your icons are properly accessible (invisible).\n\n### Ãcones SVG SemÃ¢nticos\n\nSe o seu Ã­cone tiver significado semÃ¢ntico, tudo o que vocÃª precisa fazer Ã© configurar a propriedade `titleAccess="significado"`. The `role="img"` attribute and the `<title>` element are added so that your icons are properly accessible.\n\nNo caso de elementos interativos focalizÃ¡veis, como quando usado com um botÃ£o de Ã­cone, vocÃª pode usar a propriedade `aria-label`:\n\n```jsx\nimport IconButton from \'@material-ui/core/IconButton\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\n// ...\n\n<IconButton aria-label="deletar">\n  <SvgIcon>\n    <path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" />\n  </SvgIcon>\n</IconButton>\n```\n\n### Ãcones de Fonte Decorativos\n\nSe seus Ã­cones sÃ£o puramente decorativos, vocÃª jÃ¡ terminou! The `aria-hidden=true` attribute is added so that your icons are properly accessible (invisible).\n\n### Ãcones de Fonte SemÃ¢nticos\n\nSe os seus Ã­cones tiverem significado semÃ¢ntico, vocÃª precisarÃ¡ fornecer uma alternativa em texto visÃ­vel apenas para tecnologias visuais.\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\nimport Typography from \'@material-ui/core/Typography\';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Typography variant="srOnly">Criar usuÃ¡rio</Typography>\n```\n\n### ReferÃªncia\n\n- https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/\n' },
        gZck: function(e, n) { e.exports = 'import React from \'react\';\nimport { makeStyles, createStyles, Theme } from \'@material-ui/core/styles\';\nimport { blue, red } from \'@material-ui/core/colors\';\nimport SvgIcon, { SvgIconProps } from \'@material-ui/core/SvgIcon\';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      \'& > svg\': {\n        margin: theme.spacing(2),\n      },\n    },\n    iconHover: {\n      \'&:hover\': {\n        color: red[800],\n      },\n    },\n  }),\n);\n\nfunction HomeIcon(props: SvgIconProps) {\n  return (\n    <SvgIcon {...props}>\n      <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" />\n    </SvgIcon>\n  );\n}\n\nexport default function SvgIcons() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <HomeIcon />\n      <HomeIcon color="primary" />\n      <HomeIcon color="secondary" />\n      <HomeIcon color="action" />\n      <HomeIcon className={classes.iconHover} color="error" style={{ fontSize: 30 }} />\n      <HomeIcon color="disabled" fontSize="large" />\n      <HomeIcon\n        color="primary"\n        fontSize="large"\n        component={(svgProps: SvgIconProps) => {\n          return (\n            <svg {...svgProps}>\n              <defs>\n                <linearGradient id="gradient1">\n                  <stop offset="30%" stopColor={blue[400]} />\n                  <stop offset="70%" stopColor={red[400]} />\n                </linearGradient>\n              </defs>\n              {React.cloneElement(\n                (svgProps.children as React.ReactNodeArray)[0] as React.ReactElement,\n                {\n                  fill: \'url(#gradient1)\',\n                },\n              )}\n            </svg>\n          );\n        }}\n      />\n    </div>\n  );\n}\n' },
        hyOX: function(e, n, o) {
            "use strict";
            var t = o("mXGw"),
                a = o.n(t),
                r = o("0Zz2");
            n.a = Object(r.a)(a.a.createElement("path", { d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 10.5h-1V15H9.5v-1.5h-3V9H8v3h1.5V9H11v3h1v1.5zm6 1.5h-1.75l-1.75-2.25V15H13V9h1.5v2.25L16.25 9H18l-2.25 3L18 15z" }), "FourK")
        },
        jEAR: function(e, n) { e.exports = 'import React from \'react\';\nimport { makeStyles } from \'@material-ui/core/styles\';\nimport { blue, red } from \'@material-ui/core/colors\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \'& > svg\': {\n      margin: theme.spacing(2),\n    },\n  },\n  iconHover: {\n    \'&:hover\': {\n      color: red[800],\n    },\n  },\n}));\n\nfunction HomeIcon(props) {\n  return (\n    <SvgIcon {...props}>\n      <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" />\n    </SvgIcon>\n  );\n}\n\nexport default function SvgIcons() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <HomeIcon />\n      <HomeIcon color="primary" />\n      <HomeIcon color="secondary" />\n      <HomeIcon color="action" />\n      <HomeIcon className={classes.iconHover} color="error" style={{ fontSize: 30 }} />\n      <HomeIcon color="disabled" fontSize="large" />\n      <HomeIcon\n        color="primary"\n        fontSize="large"\n        component={svgProps => {\n          return (\n            <svg {...svgProps}>\n              <defs>\n                <linearGradient id="gradient1">\n                  <stop offset="30%" stopColor={blue[400]} />\n                  <stop offset="70%" stopColor={red[400]} />\n                </linearGradient>\n              </defs>\n              {React.cloneElement(svgProps.children[0], {\n                fill: \'url(#gradient1)\',\n              })}\n            </svg>\n          );\n        }}\n      />\n    </div>\n  );\n}\n' },
        lWqO: function(e, n) { e.exports = '---\ntitle: React-ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ‚ Icon\ncomponents: Icon, SvgIcon\n---\n\n# Ð˜ÐºÐ¾Ð½ÐºÐ¸\n\n<p class="description">Ð ÑƒÐºÐ¾Ð²Ð¾Ð´ÑÑ‚Ð²Ð¾ Ð¸ Ñ€ÐµÐºÐ¾Ð¼ÐµÐ½Ð´Ð°Ñ†Ð¸Ð¸ Ð¿Ð¾ Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ð½Ð¸ÑŽ Ð¸ÐºÐ¾Ð½Ð¾Ðº Ð² Material-UI.</p>\n\nMaterial-UI provides icons support in three ways:\n\n1. Standardized [Material Design icons](#material-icons) exported as React components (SVG icons).\n1. With the [SvgIcon](#svgicon) component, a React wrapper for custom SVG icons.\n1. With the [Icon](#icon-font-icons) component, a React wrapper for custom font icons.\n\n## Material Icons\n\nMaterial Design has standardized over 1,000 official icons, each in five different "themes" (see below). For each SVG icon, we export the respective React component from the `@material-ui/icons` package. You can search the full list of these icons in our [built-in search page](/components/material-icons/).\n\n### Ð˜ÑÐ¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ð½Ð¸Ðµ\n\nInstall `@material-ui/icons`. Import icons using one of these two options:\n\n- Option 1:\n\n  ```jsx\n  import AccessAlarmIcon from \'@material-ui/icons/AccessAlarm\';\n  import ThreeDRotation from \'@material-ui/icons/ThreeDRotation\';\n  ```\n\n- Option 2:\n\n  ```jsx\n  import { AccessAlarm, ThreeDRotation } from \'@material-ui/icons\';\n  ```\n\nThe safest is Option 1 but Option 2 can yield the best developer experience. Make sure you follow the [minimizing bundle size guide](/guides/minimizing-bundle-size/#option-2) before using the second approach. The configuration of a Babel plugin is encouraged.\n\nEach icon also has a "theme": `Filled` (default), `Outlined`, `Rounded`, `Two tone` and `Sharp`. If you want to import the icon component with a "theme" different than default, append the "theme" name to the icon name. For example `@material-ui/icons/Delete` icon with:\n\n- `Filled` "theme" (default) is exported as `@material-ui/icons/Delete`,\n- `Outlined` "theme" is exported as `@material-ui/icons/DeleteOutlined`,\n- `Rounded` "theme" is exported as `@material-ui/icons/DeleteRounded`,\n- `Two tone` "theme" is exported as `@material-ui/icons/DeleteTwoTone`,\n- `Sharp` "theme" is exported as `@material-ui/icons/DeleteSharp`.\n\nNote: The Material Design specification names the icons using "snake_case" naming (for example `delete_forever`, `add_a_photo`), while `@material-ui/icons` exports the respective icons using "PascalCase" naming (for example `DeleteForever`, `AddAPhoto`). There are three exceptions to this naming rule: `3d_rotation` exported as `ThreeDRotation`, `4k` exported as `FourK`, and `360` exported as `ThreeSixty`.\n\n{{"demo": "pages/components/icons/SvgMaterialIcons.js"}}\n\n## SvgIcon\n\nIf you need a custom SVG icon (not available in Material Icons) you should use the `SvgIcon` wrapper. The `SvgIcon` component takes the SVG `path` element as its child and converts it to a React component that displays this SVG icon, and allows the icon to be styled and respond to mouse events. SVG elements should be scaled for a 24x24px viewport.\n\nThe resulting icon can be used as is, or included as a child for other Material-UI components that use icons. ÐŸÐ¾ ÑƒÐ¼Ð¾Ð»Ñ‡Ð°Ð½Ð¸ÑŽ Ð¸ÐºÐ¾Ð½ÐºÐ° Ð½Ð°ÑÐ»ÐµÐ´ÑƒÐµÑ‚ Ñ‚ÐµÐºÑƒÑ‰Ð¸Ð¹ Ñ†Ð²ÐµÑ‚ Ñ‚ÐµÐºÑÑ‚Ð°. ÐŸÑ€Ð¸ Ð¶ÐµÐ»Ð°Ð½Ð¸Ð¸ Ð²Ñ‹ Ð¼Ð¾Ð¶ÐµÑ‚Ðµ ÑƒÑÑ‚Ð°Ð½Ð¾Ð²Ð¸Ñ‚ÑŒ Ñ†Ð²ÐµÑ‚ Ð¸ÐºÐ¾Ð½ÐºÐ¸ Ñ Ð¿Ð¾Ð¼Ð¾Ñ‰ÑŒÑŽ Ð¾Ð´Ð½Ð¾Ð³Ð¾ Ð¸Ð· ÑÐ²Ð¾Ð¹ÑÑ‚Ð² Ñ†Ð²ÐµÑ‚Ð° Ñ‚ÐµÐ¼Ñ‹: `primary`, `secondary`, `action`, `error` Ð¸Ð»Ð¸ `disabled`.\n\n{{"demo": "pages/components/icons/SvgIcons.js"}}\n\n### Libraries\n\n#### Material Design (recommended)\n\nMaterial Design has standardized over [1,000 official icons](#material-icons).\n\n#### MDI\n\n[materialdesignicons.com](https://materialdesignicons.com/) provides over 2,000 icons. For the wanted icon, copy the SVG `path` they provide, and use it as the child of the `SvgIcon` component.\n\nNote: [mdi-material-ui](https://github.com/TeamWertarbyte/mdi-material-ui) has already wrapped each of these SVG icons with the `SvgIcon` component, so you don\'t have to do it yourself.\n\n## Icon (Font icons)\n\nÐšÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ‚ `Icon` Ð¾Ñ‚Ð¾Ð±Ñ€Ð°Ð¶Ð°ÐµÑ‚ Ð¸ÐºÐ¾Ð½ÐºÑƒ Ð¸Ð· Ð»ÑŽÐ±Ð¾Ð³Ð¾ Ð¸ÐºÐ¾Ð½Ð¾Ñ‡Ð½Ð¾Ð³Ð¾ ÑˆÑ€Ð¸Ñ„Ñ‚Ð° Ñ Ð¿Ð¾Ð´Ð´ÐµÑ€Ð¶ÐºÐ¾Ð¹ Ð»Ð¸Ð³Ð°Ñ‚ÑƒÑ€. ÐŸÑ€ÐµÐ´Ð²Ð°Ñ€Ð¸Ñ‚ÐµÐ»ÑŒÐ½Ð¾ Ð½ÐµÐ¾Ð±Ñ…Ð¾Ð´Ð¸Ð¼Ð¾ Ð²ÐºÐ»ÑŽÑ‡Ð¸Ñ‚ÑŒ Ð² Ð¿Ñ€Ð¾ÐµÐºÑ‚ ÑˆÑ€Ð¸Ñ„Ñ‚, Ñ‚Ð°ÐºÐ¾Ð¹ ÐºÐ°Ðº [Material icon font](https://google.github.io/material-design-icons/#icon-font-for-the-web), Ñ Ð¿Ð¾Ð¼Ð¾Ñ‰ÑŒÑŽ, Ð½Ð°Ð¿Ñ€Ð¸Ð¼ÐµÑ€, Google Web Fonts:\n\n```html\n<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />\n```\n\n`Icon` will set the correct class name for the Material icon font. For other fonts, you must supply the class name using the Icon component\'s `className` property.\n\nÐ§Ñ‚Ð¾Ð±Ñ‹ Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÑŒ Ð¸ÐºÐ¾Ð½ÐºÑƒ, Ð¿Ñ€Ð¾ÑÑ‚Ð¾ Ð¾Ð±ÐµÑ€Ð½Ð¸Ñ‚Ðµ ÐµÑ‘ Ð¸Ð¼Ñ (Ð»Ð¸Ð³Ð°Ñ‚ÑƒÑ€Ñƒ ÑˆÑ€Ð¸Ñ„Ñ‚Ð°) Ð² ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ‚ `Icon`, Ð½Ð°Ð¿Ñ€Ð¸Ð¼ÐµÑ€:\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\n\n<Icon>star</Icon>\n```\n\nÐŸÐ¾ ÑƒÐ¼Ð¾Ð»Ñ‡Ð°Ð½Ð¸ÑŽ Ð¸ÐºÐ¾Ð½ÐºÐ° Ð½Ð°ÑÐ»ÐµÐ´ÑƒÐµÑ‚ Ñ‚ÐµÐºÑƒÑ‰Ð¸Ð¹ Ñ†Ð²ÐµÑ‚ Ñ‚ÐµÐºÑÑ‚Ð°. ÐŸÑ€Ð¸ Ð¶ÐµÐ»Ð°Ð½Ð¸Ð¸ Ð²Ñ‹ Ð¼Ð¾Ð¶ÐµÑ‚Ðµ ÑƒÑÑ‚Ð°Ð½Ð¾Ð²Ð¸Ñ‚ÑŒ Ñ†Ð²ÐµÑ‚ Ð¸ÐºÐ¾Ð½ÐºÐ¸ Ñ Ð¿Ð¾Ð¼Ð¾Ñ‰ÑŒÑŽ Ð¾Ð´Ð½Ð¾Ð³Ð¾ Ð¸Ð· ÑÐ²Ð¾Ð¹ÑÑ‚Ð² Ñ†Ð²ÐµÑ‚Ð° Ñ‚ÐµÐ¼Ñ‹: `primary`, `secondary`, `action`, `error` Ð¸Ð»Ð¸ `disabled`.\n\n### Ð¨Ñ€Ð¸Ñ„Ñ‚Ð¾Ð²Ñ‹Ðµ Ð¸ÐºÐ¾Ð½ÐºÐ¸ Material\n\n{{"demo": "pages/components/icons/Icons.js"}}\n\n### Font Awesome\n\n[Font Awesome](https://fontawesome.com/icons) Ð¼Ð¾Ð¶Ð½Ð¾ Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÑŒ Ñ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ‚Ð¾Ð¼ `Icon` ÑÐ»ÐµÐ´ÑƒÑŽÑ‰Ð¸Ð¼ Ð¾Ð±Ñ€Ð°Ð·Ð¾Ð¼:\n\n{{"demo": "pages/components/icons/FontAwesome.js", "hideEditButton": true}}\n\n## Font vs SVG. Which approach to use?\n\nÐžÐ±Ð° Ð¿Ð¾Ð´Ñ…Ð¾Ð´Ð° Ñ€Ð°Ð±Ð¾Ñ‚Ð°ÑŽÑ‚ Ð½Ð¾Ñ€Ð¼Ð°Ð»ÑŒÐ½Ð¾, Ð¾Ð´Ð½Ð°ÐºÐ¾ ÐµÑÑ‚ÑŒ Ð½ÐµÐºÐ¾Ñ‚Ð¾Ñ€Ñ‹Ðµ Ñ‚Ð¾Ð½ÐºÐ¸Ðµ Ñ€Ð°Ð·Ð»Ð¸Ñ‡Ð¸Ñ, Ð¾ÑÐ¾Ð±ÐµÐ½Ð½Ð¾ Ñ Ñ‚Ð¾Ñ‡ÐºÐ¸ Ð·Ñ€ÐµÐ½Ð¸Ñ Ð¿Ñ€Ð¾Ð¸Ð·Ð²Ð¾Ð´Ð¸Ñ‚ÐµÐ»ÑŒÐ½Ð¾ÑÑ‚Ð¸ Ð¸ ÐºÐ°Ñ‡ÐµÑÑ‚Ð²Ð° Ð¾Ñ‚Ñ€Ð¸ÑÐ¾Ð²ÐºÐ¸. ÐšÐ¾Ð³Ð´Ð° ÑÑ‚Ð¾ Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾, Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ð½Ð¸Ðµ SVG ÑÐ²Ð»ÑÐµÑ‚ÑÑ Ð±Ð¾Ð»ÐµÐµ Ð¿Ñ€ÐµÐ´Ð¿Ð¾Ñ‡Ñ‚Ð¸Ñ‚ÐµÐ»ÑŒÐ½Ñ‹Ð¼, Ñ‚Ð°Ðº ÐºÐ°Ðº Ð² ÑÑ‚Ð¾Ð¼ ÑÐ»ÑƒÑ‡Ð°Ðµ ÐµÑÑ‚ÑŒ Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾ÑÑ‚ÑŒ Ñ€Ð°Ð·Ð´ÐµÐ»ÐµÐ½Ð¸Ñ ÐºÐ¾Ð´Ð°, Ð¿Ð¾Ð´Ð´ÐµÑ€Ð¶Ð¸Ð²Ð°ÐµÑ‚ÑÑ Ð±Ð¾Ð»ÑŒÑˆÐµ Ð¸ÐºÐ¾Ð½Ð¾Ðº, Ð¾Ñ‚Ñ€Ð¸ÑÐ¾Ð²ÐºÐ° Ð¿Ñ€Ð¾Ð¸ÑÑ…Ð¾Ð´Ð¸Ñ‚ Ð»ÑƒÑ‡ÑˆÐµ Ð¸ Ð±Ñ‹ÑÑ‚Ñ€ÐµÐµ.\n\nFor more details, you can check out [why GitHub migrated from font icons to SVG icons](https://github.blog/2016-02-22-delivering-octicons-with-svg/).\n\n## Ð”Ð¾ÑÑ‚ÑƒÐ¿Ð½Ð¾ÑÑ‚ÑŒ\n\nÐ˜ÐºÐ¾Ð½ÐºÐ¸ Ð¼Ð¾Ð³ÑƒÑ‚ Ð¿ÐµÑ€ÐµÐ´Ð°Ð²Ð°Ñ‚ÑŒ Ð²ÑÐµÐ²Ð¾Ð·Ð¼Ð¾Ð¶Ð½ÑƒÑŽ Ð·Ð½Ð°Ñ‡Ð¸Ð¼ÑƒÑŽ Ð¸Ð½Ñ„Ð¾Ñ€Ð¼Ð°Ñ†Ð¸ÑŽ, Ð¿Ð¾ÑÑ‚Ð¾Ð¼Ñƒ Ð²Ð°Ð¶Ð½Ð¾, Ñ‡Ñ‚Ð¾Ð±Ñ‹ Ð¾Ð½Ð¸ Ð¾Ñ…Ð²Ð°Ñ‚Ñ‹Ð²Ð°Ð»Ð¸ Ð¼Ð°ÐºÑÐ¸Ð¼Ð°Ð»ÑŒÐ½Ð¾ Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾Ðµ ÐºÐ¾Ð»Ð¸Ñ‡ÐµÑÑ‚Ð²Ð¾ Ð»ÑŽÐ´ÐµÐ¹. There are two use cases youâ€™ll want to consider:\n- **Decorative Icons** are only being used for visual or branding reinforcement. If they were removed from the page, users would still understand and be able to use your page.\n- **Semantic Icons** are ones that youâ€™re using to convey meaning, rather than just pure decoration. This includes icons without text next to them used as interactive controls â€” buttons, form elements, toggles, etc.\n\n### Ð”ÐµÐºÐ¾Ñ€Ð°Ñ‚Ð¸Ð²Ð½Ñ‹Ðµ SVG-Ð¸ÐºÐ¾Ð½ÐºÐ¸\n\nIf your icons are purely decorative, youâ€™re already done! The `aria-hidden=true` attribute is added so that your icons are properly accessible (invisible).\n\n### Ð¡ÐµÐ¼Ð°Ð½Ñ‚Ð¸Ñ‡ÐµÑÐºÐ¸Ðµ SVG-Ð¸ÐºÐ¾Ð½ÐºÐ¸\n\nÐ•ÑÐ»Ð¸ Ñƒ Ð²Ð°ÑˆÐµÐ¹ Ð¸ÐºÐ¾Ð½ÐºÐ¸ ÐµÑÑ‚ÑŒ ÑÐµÐ¼Ð°Ð½Ñ‚Ð¸Ñ‡ÐµÑÐºÐ¾Ðµ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ, Ð½ÐµÐ¾Ð±Ñ…Ð¾Ð´Ð¸Ð¼Ð¾ Ñ‚Ð¾Ð»ÑŒÐºÐ¾ Ð´Ð¾Ð±Ð°Ð²Ð¸Ñ‚ÑŒ ÑÐ²Ð¾Ð¹ÑÑ‚Ð²Ð¾ `titleAccess="Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ"`. The `role="img"` attribute and the `<title>` element are added so that your icons are properly accessible.\n\nÐ’ ÑÐ»ÑƒÑ‡Ð°Ðµ Ñ„Ð¾ÐºÑƒÑÐ¸Ñ€ÑƒÐµÐ¼Ñ‹Ñ… Ð¸Ð½Ñ‚ÐµÑ€Ð°ÐºÑ‚Ð¸Ð²Ð½Ñ‹Ñ… ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð¾Ð², Ð½Ð°Ð¿Ñ€Ð¸Ð¼ÐµÑ€, ÐºÐ½Ð¾Ð¿ÐºÐ¸ Ñ Ð¸ÐºÐ¾Ð½ÐºÐ¾Ð¹, Ð¼Ð¾Ð¶Ð½Ð¾ Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÑŒ ÑÐ²Ð¾Ð¹ÑÑ‚Ð²Ð¾ `aria-label`:\n\n```jsx\nimport IconButton from \'@material-ui/core/IconButton\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\n// ...\n\n<IconButton aria-label="delete">\n  <SvgIcon>\n    <path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" />\n  </SvgIcon>\n</IconButton>\n```\n\n### Ð”ÐµÐºÐ¾Ñ€Ð°Ñ‚Ð¸Ð²Ð½Ñ‹Ðµ ÑˆÑ€Ð¸Ñ„Ñ‚Ð¾Ð²Ñ‹Ðµ Ð¸ÐºÐ¾Ð½ÐºÐ¸\n\nIf your icons are purely decorative, youâ€™re already done! The `aria-hidden=true` attribute is added so that your icons are properly accessible (invisible).\n\n### Ð¡ÐµÐ¼Ð°Ð½Ñ‚Ð¸Ñ‡ÐµÑÐºÐ¸Ðµ ÑˆÑ€Ð¸Ñ„Ñ‚Ð¾Ð²Ñ‹Ðµ Ð¸ÐºÐ¾Ð½ÐºÐ¸\n\nÐ•ÑÐ»Ð¸ Ñƒ Ð²Ð°ÑˆÐ¸Ñ… Ð¸ÐºÐ¾Ð½Ð¾Ðº ÐµÑÑ‚ÑŒ ÑÐµÐ¼Ð°Ð½Ñ‚Ð¸Ñ‡ÐµÑÐºÐ¾Ðµ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ, Ð½ÐµÐ¾Ð±Ñ…Ð¾Ð´Ð¸Ð¼Ð¾ Ð¿Ñ€ÐµÐ´Ð¾ÑÑ‚Ð°Ð²Ð¸Ñ‚ÑŒ Ñ‚ÐµÐºÑÑ‚Ð¾Ð²ÑƒÑŽ Ð°Ð»ÑŒÑ‚ÐµÑ€Ð½Ð°Ñ‚Ð¸Ð²Ñƒ, Ð²Ð¸Ð´Ð¸Ð¼ÑƒÑŽ Ñ‚Ð¾Ð»ÑŒÐºÐ¾ Ð´Ð»Ñ Ð²ÑÐ¿Ð¾Ð¼Ð¾Ð³Ð°Ñ‚ÐµÐ»ÑŒÐ½Ñ‹Ñ… Ñ‚ÐµÑ…Ð½Ð¾Ð»Ð¾Ð³Ð¸Ð¹.\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\nimport Typography from \'@material-ui/core/Typography\';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Typography variant="srOnly">Ð¡Ð¾Ð·Ð´Ð°Ñ‚ÑŒ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ñ</Typography>\n```\n\n### Ð¡Ð¿Ñ€Ð°Ð²ÐºÐ°\n\n- https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/\n' },
        n8Vp: function(e, n) { e.exports = '---\ntitle: React Icon Component\ncomponents: Icon, SvgIcon\n---\n\n# Icons\n\n<p class="description">Guidance and suggestions for using icons with Material-UI.</p>\n\nMaterial-UI provides icons support in three ways:\n\n1. Standardized [Material Design icons](#material-icons) exported as React components (SVG icons).\n1. With the [SvgIcon](#svgicon) component, a React wrapper for custom SVG icons.\n1. With the [Icon](#icon-font-icons) component, a React wrapper for custom font icons.\n\n## Material Icons\n\nMaterial Design has standardized over 1,000 official icons, each in five different "themes" (see below). For each SVG icon, we export the respective React component from the `@material-ui/icons` package. You can search the full list of these icons in our [built-in search page](/components/material-icons/).\n\n### Usage\n\nInstall `@material-ui/icons`. Import icons using one of these two options:\n\n- Option 1:\n\n  ```jsx\n  import AccessAlarmIcon from \'@material-ui/icons/AccessAlarm\';\n  import ThreeDRotation from \'@material-ui/icons/ThreeDRotation\';\n  ```\n\n- Option 2:\n\n  ```jsx\n  import { AccessAlarm, ThreeDRotation } from \'@material-ui/icons\';\n  ```\n\nThe safest is Option 1 but Option 2 can yield the best developer experience.\nMake sure you follow the [minimizing bundle size guide](/guides/minimizing-bundle-size/#option-2) before using the second approach.\nThe configuration of a Babel plugin is encouraged.\n\nEach icon also has a "theme": `Filled` (default), `Outlined`, `Rounded`, `Two tone` and `Sharp`. If you want to import the icon component with a "theme" different than default, append the "theme" name to the icon name. For example `@material-ui/icons/Delete` icon with:\n\n- `Filled` "theme" (default) is exported as `@material-ui/icons/Delete`,\n- `Outlined` "theme" is exported as `@material-ui/icons/DeleteOutlined`,\n- `Rounded` "theme" is exported as `@material-ui/icons/DeleteRounded`,\n- `Two tone` "theme" is exported as `@material-ui/icons/DeleteTwoTone`,\n- `Sharp` "theme" is exported as `@material-ui/icons/DeleteSharp`.\n\nNote: The Material Design specification names the icons using "snake_case" naming (for example `delete_forever`, `add_a_photo`), while `@material-ui/icons` exports the respective icons using "PascalCase" naming (for example `DeleteForever`, `AddAPhoto`). There are three exceptions to this naming rule: `3d_rotation` exported as `ThreeDRotation`, `4k` exported as `FourK`, and `360` exported as `ThreeSixty`.\n\n{{"demo": "pages/components/icons/SvgMaterialIcons.js"}}\n\n## SvgIcon\n\nIf you need a custom SVG icon (not available in Material Icons) you should use the `SvgIcon` wrapper.\nThe `SvgIcon` component takes the SVG `path` element as its child and converts it to a React component that displays this SVG icon, and allows the icon to be styled and respond to mouse events.\nSVG elements should be scaled for a 24x24px viewport.\n\nThe resulting icon can be used as is,\nor included as a child for other Material-UI components that use icons.\nBy default, an Icon will inherit the current text color.\nOptionally, you can set the icon color using one of the theme color properties: `primary`, `secondary`, `action`, `error` & `disabled`.\n\n{{"demo": "pages/components/icons/SvgIcons.js"}}\n\n### Libraries\n\n#### Material Design (recommended)\n\nMaterial Design has standardized over [1,000 official icons](#material-icons).\n\n#### MDI\n\n[materialdesignicons.com](https://materialdesignicons.com/) provides over 2,000 icons.\nFor the wanted icon, copy the SVG `path` they provide, and use it as the child of the `SvgIcon` component.\n\nNote: [mdi-material-ui](https://github.com/TeamWertarbyte/mdi-material-ui) has already wrapped each of these SVG icons with the `SvgIcon` component, so you don\'t have to do it yourself.\n\n## Icon (Font icons)\n\nThe `Icon` component will display an icon from any icon font that supports ligatures.\nAs a prerequisite, you must include one, such as the\n[Material icon font](https://google.github.io/material-design-icons/#icon-font-for-the-web) in your project, for instance, via Google Web Fonts:\n\n```html\n<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />\n```\n\n`Icon` will set the correct class name for the Material icon font. For other fonts, you must supply the\nclass name using the Icon component\'s `className` property.\n\nTo use an icon simply wrap the icon name (font ligature) with the `Icon` component,\nfor example:\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\n\n<Icon>star</Icon>\n```\n\nBy default, an Icon will inherit the current text color.\nOptionally, you can set the icon color using one of the theme color properties: `primary`, `secondary`, `action`, `error` & `disabled`.\n\n### Font Material icons\n\n{{"demo": "pages/components/icons/Icons.js"}}\n\n### Font Awesome\n\n[Font Awesome](https://fontawesome.com/icons) can be used with the `Icon` component as follow:\n\n{{"demo": "pages/components/icons/FontAwesome.js", "hideEditButton": true}}\n\n## Font vs SVG. Which approach to use?\n\nBoth approaches work fine, however, there are some subtle differences, especially in terms of performance and rendering quality.\nWhenever possible SVG is preferred as it allows code splitting, supports more icons, renders faster and better.\n\nFor more details, you can check out [why GitHub migrated from font icons to SVG icons](https://github.blog/2016-02-22-delivering-octicons-with-svg/).\n\n## Accessibility\n\nIcons can convey all sorts of meaningful information, so itâ€™s important that they reach the largest amount of people possible.\nThere are two use cases youâ€™ll want to consider:\n- **Decorative Icons** are only being used for visual or branding reinforcement.\nIf they were removed from the page, users would still understand and be able to use your page.\n- **Semantic Icons** are ones that youâ€™re using to convey meaning, rather than just pure decoration.\nThis includes icons without text next to them used as interactive controls â€” buttons, form elements, toggles, etc.\n\n### Decorative SVG Icons\n\nIf your icons are purely decorative, youâ€™re already done!\nThe `aria-hidden=true` attribute is added so that your icons are properly accessible (invisible).\n\n### Semantic SVG Icons\n\nIf your icon has semantic meaning, all you need to do is throw in a `titleAccess="meaning"` property.\nThe `role="img"` attribute and the `<title>` element are added so that your icons are properly accessible.\n\nIn the case of focusable interactive elements, like when used with an icon button, you can use the `aria-label` property:\n\n```jsx\nimport IconButton from \'@material-ui/core/IconButton\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\n// ...\n\n<IconButton aria-label="delete">\n  <SvgIcon>\n    <path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" />\n  </SvgIcon>\n</IconButton>\n```\n\n### Decorative Font Icons\n\nIf your icons are purely decorative, youâ€™re already done!\nThe `aria-hidden=true` attribute is added so that your icons are properly accessible (invisible).\n\n### Semantic Font Icons\n\nIf your icons have semantic meaning, you need to provide a text alternative only visible to assistive technologies.\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\nimport Typography from \'@material-ui/core/Typography\';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Typography variant="srOnly">Create a user</Typography>\n```\n\n### Reference\n\n- https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/\n' },
        njkh: function(e, n, o) {
            "use strict";
            o.r(n), o.d(n, "default", function() { return h });
            var t = o("mXGw"),
                a = o.n(t),
                r = o("yZEQ"),
                i = o("Px1Q"),
                s = o("Pw6v"),
                c = Object(r.a)(function(e) { return { root: { "& > span": { margin: e.spacing(2) } }, iconHover: { "&:hover": { color: i.a[800] } } } }),
                l = a.a.createElement(s.a, null, "add_circle"),
                d = a.a.createElement(s.a, { color: "primary" }, "add_circle"),
                m = a.a.createElement(s.a, { color: "secondary" }, "add_circle"),
                u = a.a.createElement(s.a, { color: "action" }, "add_circle"),
                p = a.a.createElement(s.a, { color: "disabled", fontSize: "large" }, "add_circle");

            function h() { var e = c(); return a.a.createElement("div", { className: e.root }, l, d, m, u, a.a.createElement(s.a, { className: e.iconHover, color: "error", style: { fontSize: 30 } }, "add_circle"), p) }
        },
        pP3L: function(e, n, o) {
            "use strict";
            o.r(n), o.d(n, "default", function() { return y });
            var t = o("mXGw"),
                a = o.n(t),
                r = o("yZEQ"),
                i = o("WLtd"),
                s = o("Px1Q"),
                c = o("GeB9"),
                l = o("6dYU"),
                d = Object(r.a)(function(e) { return Object(i.a)({ root: { "& > svg": { margin: e.spacing(2) } }, iconHover: { "&:hover": { color: s.a[800] } } }) }),
                m = a.a.createElement("path", { d: "M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" });

            function u(e) { return a.a.createElement(l.a, e, m) }
            var p = a.a.createElement(u, null),
                h = a.a.createElement(u, { color: "primary" }),
                f = a.a.createElement(u, { color: "secondary" }),
                g = a.a.createElement(u, { color: "action" }),
                v = a.a.createElement(u, { color: "disabled", fontSize: "large" });

            function y() { var e = d(); return a.a.createElement("div", { className: e.root }, p, h, f, g, a.a.createElement(u, { className: e.iconHover, color: "error", style: { fontSize: 30 } }), v, a.a.createElement(u, { color: "primary", fontSize: "large", component: function(e) { return a.a.createElement("svg", e, a.a.createElement("defs", null, a.a.createElement("linearGradient", { id: "gradient1" }, a.a.createElement("stop", { offset: "30%", stopColor: c.a[400] }), a.a.createElement("stop", { offset: "70%", stopColor: s.a[400] }))), a.a.cloneElement(e.children[0], { fill: "url(#gradient1)" })) } })) }
        },
        pQ8Y: function(e, n, o) {
            "use strict";
            var t = o("2Fjn"),
                a = o("Rbzu"),
                r = o("yLsn"),
                i = o.n(r),
                s = o("z3IF"),
                c = o("mXGw"),
                l = o.n(c),
                d = o("PDtE"),
                m = o("XpU0"),
                u = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                p = ["auto", !0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];

            function h(e) {
                var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1,
                    o = i()(e);
                return "".concat(o / n).concat(String(e).replace(String(o), "") || "px")
            }
            var f = l.a.forwardRef(function(e, n) {
                var o = e.alignContent,
                    a = void 0 === o ? "stretch" : o,
                    r = e.alignItems,
                    i = void 0 === r ? "stretch" : r,
                    c = e.classes,
                    m = e.className,
                    u = e.component,
                    p = void 0 === u ? "div" : u,
                    h = e.container,
                    f = void 0 !== h && h,
                    g = e.direction,
                    v = void 0 === g ? "row" : g,
                    y = e.item,
                    I = void 0 !== y && y,
                    w = e.justify,
                    S = void 0 === w ? "flex-start" : w,
                    b = e.lg,
                    x = void 0 !== b && b,
                    T = e.md,
                    D = void 0 !== T && T,
                    G = e.sm,
                    E = void 0 !== G && G,
                    z = e.spacing,
                    M = void 0 === z ? 0 : z,
                    F = e.wrap,
                    j = void 0 === F ? "wrap" : F,
                    R = e.xl,
                    V = void 0 !== R && R,
                    O = e.xs,
                    A = void 0 !== O && O,
                    k = e.zeroMinWidth,
                    N = void 0 !== k && k,
                    H = Object(t.a)(e, ["alignContent", "alignItems", "classes", "className", "component", "container", "direction", "item", "justify", "lg", "md", "sm", "spacing", "wrap", "xl", "xs", "zeroMinWidth"]),
                    L = Object(d.a)(c.root, m, f && [c.container, 0 !== M && c["spacing-xs-".concat(String(M))]], I && c.item, N && c.zeroMinWidth, "row" !== v && c["direction-xs-".concat(String(v))], "wrap" !== j && c["wrap-xs-".concat(String(j))], "stretch" !== i && c["align-items-xs-".concat(String(i))], "stretch" !== a && c["align-content-xs-".concat(String(a))], "flex-start" !== S && c["justify-xs-".concat(String(S))], !1 !== A && c["grid-xs-".concat(String(A))], !1 !== E && c["grid-sm-".concat(String(E))], !1 !== D && c["grid-md-".concat(String(D))], !1 !== x && c["grid-lg-".concat(String(x))], !1 !== V && c["grid-xl-".concat(String(V))]);
                return l.a.createElement(p, Object(s.default)({ className: L, ref: n }, H))
            });
            var g = Object(m.default)(function(e) {
                return Object(a.a)({ root: {}, container: { boxSizing: "border-box", display: "flex", flexWrap: "wrap", width: "100%" }, item: { boxSizing: "border-box", margin: "0" }, zeroMinWidth: { minWidth: 0 }, "direction-xs-column": { flexDirection: "column" }, "direction-xs-column-reverse": { flexDirection: "column-reverse" }, "direction-xs-row-reverse": { flexDirection: "row-reverse" }, "wrap-xs-nowrap": { flexWrap: "nowrap" }, "wrap-xs-wrap-reverse": { flexWrap: "wrap-reverse" }, "align-items-xs-center": { alignItems: "center" }, "align-items-xs-flex-start": { alignItems: "flex-start" }, "align-items-xs-flex-end": { alignItems: "flex-end" }, "align-items-xs-baseline": { alignItems: "baseline" }, "align-content-xs-center": { alignContent: "center" }, "align-content-xs-flex-start": { alignContent: "flex-start" }, "align-content-xs-flex-end": { alignContent: "flex-end" }, "align-content-xs-space-between": { alignContent: "space-between" }, "align-content-xs-space-around": { alignContent: "space-around" }, "justify-xs-center": { justifyContent: "center" }, "justify-xs-flex-end": { justifyContent: "flex-end" }, "justify-xs-space-between": { justifyContent: "space-between" }, "justify-xs-space-around": { justifyContent: "space-around" }, "justify-xs-space-evenly": { justifyContent: "space-evenly" } }, function(e, n) {
                    var o = {};
                    return u.forEach(function(t) {
                        var a = e.spacing(t);
                        0 !== a && (o["spacing-".concat(n, "-").concat(t)] = { margin: "-".concat(h(a, 2)), width: "calc(100% + ".concat(h(a), ")"), "& > $item": { padding: h(a, 2) } })
                    }), o
                }(e, "xs"), e.breakpoints.keys.reduce(function(n, o) {
                    return function(e, n, o) {
                        var t = {};
                        p.forEach(function(e) {
                            var n = "grid-".concat(o, "-").concat(e);
                            if (!0 !== e)
                                if ("auto" !== e) {
                                    var a = "".concat(Math.round(e / 12 * 1e8) / 1e6, "%");
                                    t[n] = { flexBasis: a, flexGrow: 0, maxWidth: a }
                                } else t[n] = { flexBasis: "auto", flexGrow: 0, maxWidth: "none" };
                            else t[n] = { flexBasis: 0, flexGrow: 1, maxWidth: "100%" }
                        }), "xs" === o ? Object(s.default)(e, t) : e[n.breakpoints.up(o)] = t
                    }(n, e, o), n
                }, {}))
            }, { name: "MuiGrid" })(f);
            n.a = g
        },
        qZQ6: function(e, n, o) {
            "use strict";
            var t = o("mXGw"),
                a = o.n(t),
                r = o("0Zz2");
            n.a = Object(r.a)(a.a.createElement("path", { d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v10zm3.17-7.83c.39-.39 1.02-.39 1.41 0L12 12.59l1.42-1.42c.39-.39 1.02-.39 1.41 0 .39.39.39 1.02 0 1.41L13.41 14l1.42 1.42c.39.39.39 1.02 0 1.41-.39.39-1.02.39-1.41 0L12 15.41l-1.42 1.42c-.39.39-1.02.39-1.41 0a.9959.9959 0 010-1.41L10.59 14l-1.42-1.42c-.39-.38-.39-1.02 0-1.41zM15.5 4l-.71-.71c-.18-.18-.44-.29-.7-.29H9.91c-.26 0-.52.11-.7.29L8.5 4H6c-.55 0-1 .45-1 1s.45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1h-2.5z" }), "DeleteForeverRounded")
        },
        qhhg: function(e, n, o) {
            var t = { "./FontAwesome.js": "Krfi", "./FontAwesome.tsx": "fTFQ", "./Icons.js": "tpCO", "./Icons.tsx": "0Ifi", "./SvgIcons.js": "jEAR", "./SvgIcons.tsx": "gZck", "./SvgMaterialIcons.js": "IP1A", "./SvgMaterialIcons.tsx": "xVZr" };

            function a(e) { var n = r(e); return o(n) }

            function r(e) { var n = t[e]; if (!(n + 1)) { var o = new Error("Cannot find module '" + e + "'"); throw o.code = "MODULE_NOT_FOUND", o } return n }
            a.keys = function() { return Object.keys(t) }, a.resolve = r, e.exports = a, a.id = "qhhg"
        },
        s1bu: function(e, n, o) {
            "use strict";
            o.r(n), o.d(n, "default", function() { return f });
            var t = o("mXGw"),
                a = o.n(t),
                r = o("yZEQ"),
                i = o("WLtd"),
                s = o("Px1Q"),
                c = o("Pw6v"),
                l = Object(r.a)(function(e) { return Object(i.a)({ root: { "& > span": { margin: e.spacing(2) } }, iconHover: { "&:hover": { color: s.a[800] } } }) }),
                d = a.a.createElement(c.a, null, "add_circle"),
                m = a.a.createElement(c.a, { color: "primary" }, "add_circle"),
                u = a.a.createElement(c.a, { color: "secondary" }, "add_circle"),
                p = a.a.createElement(c.a, { color: "action" }, "add_circle"),
                h = a.a.createElement(c.a, { color: "disabled", fontSize: "large" }, "add_circle");

            function f() { var e = l(); return a.a.createElement("div", { className: e.root }, d, m, u, p, a.a.createElement(c.a, { className: e.iconHover, color: "error", style: { fontSize: 30 } }, "add_circle"), h) }
        },
        "sH+W": function(e, n, o) {
            "use strict";
            var t = o("mXGw"),
                a = o.n(t),
                r = o("0Zz2");
            n.a = Object(r.a)(a.a.createElement("path", { d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v10zM18 4h-2.5l-.71-.71c-.18-.18-.44-.29-.7-.29H9.91c-.26 0-.52.11-.7.29L8.5 4H6c-.55 0-1 .45-1 1s.45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1z" }), "DeleteRounded")
        },
        tpCO: function(e, n) { e.exports = "import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\nimport Icon from '@material-ui/core/Icon';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > span': {\n      margin: theme.spacing(2),\n    },\n  },\n  iconHover: {\n    '&:hover': {\n      color: red[800],\n    },\n  },\n}));\n\nexport default function Icons() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Icon>add_circle</Icon>\n      <Icon color=\"primary\">add_circle</Icon>\n      <Icon color=\"secondary\">add_circle</Icon>\n      <Icon color=\"action\">add_circle</Icon>\n      <Icon className={classes.iconHover} color=\"error\" style={{ fontSize: 30 }}>\n        add_circle\n      </Icon>\n      <Icon color=\"disabled\" fontSize=\"large\">\n        add_circle\n      </Icon>\n    </div>\n  );\n}\n" },
        vR0R: function(e, n, o) {
            "use strict";
            var t = o("mXGw"),
                a = o.n(t),
                r = o("0Zz2");
            n.a = Object(r.a)(a.a.createElement("path", { d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z" }), "DeleteForever")
        },
        wkti: function(e, n, o) {
            "use strict";
            o.r(n), o.d(n, "default", function() { return g });
            var t = o("mXGw"),
                a = o.n(t),
                r = o("PDtE"),
                i = o("FxtG"),
                s = o("yZEQ"),
                c = o("Px1Q"),
                l = o("Pw6v"),
                d = Object(s.a)(function(e) { return { root: { "& > .fa": { margin: e.spacing(2) } }, iconHover: { margin: e.spacing(2), "&:hover": { color: c.a[800] } } } }),
                m = a.a.createElement(l.a, { className: "fa fa-plus-circle" }),
                u = a.a.createElement(l.a, { className: "fa fa-plus-circle", color: "primary" }),
                p = a.a.createElement(l.a, { className: "fa fa-plus-circle", color: "secondary" }),
                h = a.a.createElement(l.a, { className: "fa fa-plus-circle", color: "action" }),
                f = a.a.createElement(l.a, { className: "fa fa-plus-circle", color: "disabled", fontSize: "large" });

            function g() { var e = d(); return a.a.useEffect(function() { Object(i.loadCSS)("https://use.fontawesome.com/releases/v5.1.0/css/all.css", document.querySelector("#font-awesome-css")) }, []), a.a.createElement("div", { className: e.root }, m, u, p, h, a.a.createElement(l.a, { className: Object(r.a)(e.iconHover, "fa fa-plus-circle"), color: "error", style: { fontSize: 30 } }), f) }
        },
        xVZr: function(e, n) { e.exports = "import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport DeleteTwoToneIcon from '@material-ui/icons/DeleteTwoTone';\nimport DeleteSharpIcon from '@material-ui/icons/DeleteSharp';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport DeleteForeverOutlinedIcon from '@material-ui/icons/DeleteForeverOutlined';\nimport DeleteForeverRoundedIcon from '@material-ui/icons/DeleteForeverRounded';\nimport DeleteForeverTwoToneIcon from '@material-ui/icons/DeleteForeverTwoTone';\nimport DeleteForeverSharpIcon from '@material-ui/icons/DeleteForeverSharp';\nimport ThreeDRotationIcon from '@material-ui/icons/ThreeDRotation';\nimport FourKIcon from '@material-ui/icons/FourK';\nimport ThreeSixtyIcon from '@material-ui/icons/ThreeSixty';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      color: theme.palette.text.primary,\n    },\n  }),\n);\n\nexport default function SvgMaterialIcons() {\n  const classes = useStyles();\n\n  return (\n    <Grid container className={classes.root}>\n      <Grid item xs={4}>\n        <Typography>Filled</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteIcon />\n        <DeleteForeverIcon />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Outlined</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteOutlinedIcon />\n        <DeleteForeverOutlinedIcon />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Rounded</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteRoundedIcon />\n        <DeleteForeverRoundedIcon />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Two Tone</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteTwoToneIcon />\n        <DeleteForeverTwoToneIcon />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Sharp</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <DeleteSharpIcon />\n        <DeleteForeverSharpIcon />\n      </Grid>\n      <Grid item xs={4}>\n        <Typography>Edge-cases</Typography>\n      </Grid>\n      <Grid item xs={8}>\n        <ThreeDRotationIcon />\n        <FourKIcon />\n        <ThreeSixtyIcon />\n      </Grid>\n    </Grid>\n  );\n}\n" },
        ycuu: function(e, n, o) {
            "use strict";
            o.r(n), o.d(n, "default", function() { return v });
            var t = o("mXGw"),
                a = o.n(t),
                r = o("PDtE"),
                i = o("FxtG"),
                s = o("yZEQ"),
                c = o("WLtd"),
                l = o("Px1Q"),
                d = o("Pw6v"),
                m = Object(s.a)(function(e) { return Object(c.a)({ root: { "& > .fa": { margin: e.spacing(2) } }, iconHover: { margin: e.spacing(2), "&:hover": { color: l.a[800] } } }) }),
                u = a.a.createElement(d.a, { className: "fa fa-plus-circle" }),
                p = a.a.createElement(d.a, { className: "fa fa-plus-circle", color: "primary" }),
                h = a.a.createElement(d.a, { className: "fa fa-plus-circle", color: "secondary" }),
                f = a.a.createElement(d.a, { className: "fa fa-plus-circle", color: "action" }),
                g = a.a.createElement(d.a, { className: "fa fa-plus-circle", color: "disabled", fontSize: "large" });

            function v() { var e = m(); return a.a.useEffect(function() { Object(i.loadCSS)("https://use.fontawesome.com/releases/v5.1.0/css/all.css", document.querySelector("#font-awesome-css")) }, []), a.a.createElement("div", { className: e.root }, u, p, h, f, a.a.createElement(d.a, { className: Object(r.a)(e.iconHover, "fa fa-plus-circle"), color: "error", style: { fontSize: 30 } }), g) }
        },
        yvuJ: function(e, n, o) {
            "use strict";
            var t = o("mXGw"),
                a = o.n(t),
                r = o("0Zz2");
            n.a = Object(r.a)(a.a.createElement("path", { d: "M14.12 10.47L12 12.59l-2.13-2.12-1.41 1.41L10.59 14l-2.12 2.12 1.41 1.41L12 15.41l2.12 2.12 1.41-1.41L13.41 14l2.12-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4zM6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM8 9h8v10H8V9z" }), "DeleteForeverOutlined")
        },
        yyYl: function(e, n) { e.exports = '---\ntitle: React Iconï¼ˆå›¾æ ‡ï¼‰ç»„ä»¶\ncomponents: Icon, SvgIcon\n---\n\n# Iconsï¼ˆå›¾æ ‡ï¼‰\n\n<p class="description">ä¸€äº›åœ¨ Material-UI ä¸­ä½¿ç”¨å›¾æ ‡çš„å»ºè®®å’ŒæŒ‡å¯¼ã€‚</p>\n\nMaterial-UI provides icons support in three ways:\n\n1. Standardized [Material Design icons](#material-icons) exported as React components (SVG icons).\n1. With the [SvgIcon](#svgicon) component, a React wrapper for custom SVG icons.\n1. With the [Icon](#icon-font-icons) component, a React wrapper for custom font icons.\n\n## Material Icons\n\nMaterial Design has standardized over 1,000 official icons, each in five different "themes" (see below). For each SVG icon, we export the respective React component from the `@material-ui/icons` package. You can search the full list of these icons in our [built-in search page](/components/material-icons/).\n\n### ä½¿ç”¨\n\nInstall `@material-ui/icons`. Import icons using one of these two options:\n\n- Option 1:\n\n  ```jsx\n  import AccessAlarmIcon from \'@material-ui/icons/AccessAlarm\';\n  import ThreeDRotation from \'@material-ui/icons/ThreeDRotation\';\n  ```\n\n- Option 2:\n\n  ```jsx\n  import { AccessAlarm, ThreeDRotation } from \'@material-ui/icons\';\n  ```\n\nThe safest is Option 1 but Option 2 can yield the best developer experience. Make sure you follow the [minimizing bundle size guide](/guides/minimizing-bundle-size/#option-2) before using the second approach. The configuration of a Babel plugin is encouraged.\n\nEach icon also has a "theme": `Filled` (default), `Outlined`, `Rounded`, `Two tone` and `Sharp`. If you want to import the icon component with a "theme" different than default, append the "theme" name to the icon name. For example `@material-ui/icons/Delete` icon with:\n\n- `Filled` "theme" (default) is exported as `@material-ui/icons/Delete`,\n- `Outlined` "theme" is exported as `@material-ui/icons/DeleteOutlined`,\n- `Rounded` "theme" is exported as `@material-ui/icons/DeleteRounded`,\n- `Two tone` "theme" is exported as `@material-ui/icons/DeleteTwoTone`,\n- `Sharp` "theme" is exported as `@material-ui/icons/DeleteSharp`.\n\nNote: The Material Design specification names the icons using "snake_case" naming (for example `delete_forever`, `add_a_photo`), while `@material-ui/icons` exports the respective icons using "PascalCase" naming (for example `DeleteForever`, `AddAPhoto`). There are three exceptions to this naming rule: `3d_rotation` exported as `ThreeDRotation`, `4k` exported as `FourK`, and `360` exported as `ThreeSixty`.\n\n{{"demo": "pages/components/icons/SvgMaterialIcons.js"}}\n\n## SvgIconï¼ˆSvg å›¾æ ‡ï¼‰\n\nIf you need a custom SVG icon (not available in Material Icons) you should use the `SvgIcon` wrapper. The `SvgIcon` component takes the SVG `path` element as its child and converts it to a React component that displays this SVG icon, and allows the icon to be styled and respond to mouse events. SVG elements should be scaled for a 24x24px viewport.\n\nThe resulting icon can be used as is, or included as a child for other Material-UI components that use icons. é»˜è®¤æƒ…å†µä¸‹ï¼Œä¸€ä¸ªå›¾æ ‡ä¼šç»§æ‰¿ä½¿ç”¨å½“å‰çš„æ–‡æœ¬é¢œè‰²ã€‚ æ‚¨ä¹Ÿå¯ä»¥é€‰æ‹©ä½¿ç”¨ä»¥ä¸‹ä»»ä½•ä¸€ä¸ªä¸»é¢˜é¢œè‰²å±žæ€§æ¥è®¾ç½®å›¾æ ‡çš„é¢œè‰²ï¼š`primary`ï¼Œ`secondary`ï¼Œ`action`ï¼Œ`error` ä»¥åŠ `disabled`ã€‚\n\n{{"demo": "pages/components/icons/SvgIcons.js"}}\n\n### Libraries\n\n#### Material Design (recommended)\n\nMaterial Design has standardized over [1,000 official icons](#material-icons).\n\n#### MDI\n\n[materialdesignicons.com](https://materialdesignicons.com/) provides over 2,000 icons. For the wanted icon, copy the SVG `path` they provide, and use it as the child of the `SvgIcon` component.\n\nNote: [mdi-material-ui](https://github.com/TeamWertarbyte/mdi-material-ui) has already wrapped each of these SVG icons with the `SvgIcon` component, so you don\'t have to do it yourself.\n\n## Icon (Font icons)\n\nå¯¹äºŽæ”¯æŒè¿žå­—çš„ä»»ä½•å›¾æ ‡å­—ä½“ï¼Œ`Icon` ç»„ä»¶èƒ½å¤Ÿå°†å…¶æ˜¾ç¤ºä¸ºä¸€ä¸ªå›¾æ ‡ã€‚ ä½œä¸ºå…ˆå†³æ¡ä»¶ï¼Œæ‚¨å¿…é¡»åœ¨é¡¹ç›®ä¸­åŒ…æ‹¬ä¸€ä¸ª [Material icon font](https://google.github.io/material-design-icons/#icon-font-for-the-web)ï¼Œä¸¾ä¾‹æ¥è¯´ï¼Œæ‚¨å¯ä»¥ç”± Google Web Fonts å¼•å…¥ï¼š\n\n```html\n<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />\n```\n\n`Icon` will set the correct class name for the Material icon font. For other fonts, you must supply the class name using the Icon component\'s `className` property.\n\nè‹¥æƒ³è¦ä½¿ç”¨å›¾æ ‡ï¼Œæ‚¨åªéœ€æŠŠå›¾æ ‡åï¼ˆå­—ä½“è¿žå­—ï¼‰å’Œ `Icon` ç»„ä»¶åŒ…è£…åˆ°ä¸€èµ·ï¼Œä¾‹å¦‚ï¼š\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\n\n<Icon>star</Icon>\n```\n\né»˜è®¤æƒ…å†µä¸‹ï¼Œä¸€ä¸ªå›¾æ ‡ä¼šç»§æ‰¿ä½¿ç”¨å½“å‰çš„æ–‡æœ¬é¢œè‰²ã€‚ æ‚¨ä¹Ÿå¯ä»¥é€‰æ‹©ä½¿ç”¨ä»¥ä¸‹ä»»ä½•ä¸€ä¸ªä¸»é¢˜é¢œè‰²å±žæ€§æ¥è®¾ç½®å›¾æ ‡çš„é¢œè‰²ï¼š`primary`ï¼Œ`secondary`ï¼Œ`action`ï¼Œ`error` ä»¥åŠ `disabled`ã€‚\n\n### Font Material å›¾æ ‡\n\n{{"demo": "pages/components/icons/Icons.js"}}\n\n### Font Awesome\n\nå¦‚ä¸‹æ˜¯ä¸€ä¸ªåŒæ—¶ä½¿ç”¨[Font Awesome](https://fontawesome.com/icons) ä¸Ž `Icon` çš„ç¤ºä¾‹ï¼š\n\n{{"demo": "pages/components/icons/FontAwesome.js", "hideEditButton": true}}\n\n## Font vs SVG. Which approach to use?\n\nè¿™ä¸¤ç§æ–¹æ³•éƒ½èƒ½ç®¡ç”¨ï¼Œç„¶è€Œï¼Œå®ƒä»¬ä¹‹é—´è¿˜æ˜¯æœ‰ç€ä¸€äº›å¾®å¦™çš„å·®å¼‚ï¼Œç‰¹åˆ«å½“æ¶‰åŠåˆ°æ•´ä½“æ€§èƒ½å’Œæ¸²æŸ“è´¨é‡ã€‚ æˆ‘ä»¬æŽ¨èå°½å¯èƒ½é€‰æ‹© SVGï¼Œå› ä¸ºå®ƒå…è®¸ä»£ç åˆ†å‰²ã€æ”¯æŒæ›´å¤šå›¾æ ‡ã€è€Œä¸”æ¸²æŸ“å¾—æ›´å¿«ã€æ›´å¥½ã€‚\n\nè‹¥æ‚¨æƒ³äº†è§£æ›´å¤šç»†èŠ‚ï¼Œè¯·æŸ¥çœ‹ [ ä¸ºä»€ä¹ˆ GitHub ä»Žå­—ä½“å›¾æ ‡è¿ç§»åˆ° SVG å›¾æ ‡](https://github.blog/2016-02-22-delivering-octicons-with-svg/)è¿™ç¯‡æ–‡ç« ã€‚\n\n## å¯è®¿é—®æ€§\n\nå›¾æ ‡å¯ä»¥ä¼ è¾¾å„ç§å„æ ·æœ‰æ„ä¹‰çš„ä¿¡æ¯ï¼Œæ‰€ä»¥å°†ä»–ä»¬ä¼ é€’ç»™å°½å¯èƒ½å¤šçš„å—ä¼—æ˜¯è‡³å…³é‡è¦çš„ã€‚ There are two use cases youâ€™ll want to consider:\n- **Decorative Icons** are only being used for visual or branding reinforcement. If they were removed from the page, users would still understand and be able to use your page.\n- **Semantic Icons** are ones that youâ€™re using to convey meaning, rather than just pure decoration. This includes icons without text next to them used as interactive controls â€” buttons, form elements, toggles, etc.\n\n### è£…é¥° SVG å›¾æ ‡\n\nIf your icons are purely decorative, youâ€™re already done! The `aria-hidden=true` attribute is added so that your icons are properly accessible (invisible).\n\n### è¯­ä¹‰ SVG å›¾æ ‡\n\nå¦‚æžœæ‚¨çš„å›¾æ ‡å¸¦æœ‰è¯­ä¹‰ï¼Œæ‚¨åªéœ€è¦åŒ…å« `titleAccess =â€œå«ä¹‰â€` å±žæ€§ã€‚ The `role="img"` attribute and the `<title>` element are added so that your icons are properly accessible.\n\nå¯¹äºŽé‚£äº›å¯èšç„¦çš„äº¤äº’å¼å…ƒç´ ï¼Œè­¬å¦‚ä¸Žä¸€ä¸ªå›¾æ ‡æŒ‰é’®ä¸€èµ·ä½¿ç”¨æ—¶ï¼Œæ‚¨å¯ä»¥ä½¿ç”¨ `aria-label` å±žæ€§ï¼š\n\n```jsx\nimport IconButton from \'@material-ui/core/IconButton\';\nimport SvgIcon from \'@material-ui/core/SvgIcon\';\n\n// ...\n\n<IconButton aria-label="delete">\n  <SvgIcon>\n    <path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" />\n  </SvgIcon>\n</IconButton>\n```\n\n### è£…é¥°å½¢çš„å­—ä½“å›¾æ ‡\n\nIf your icons are purely decorative, youâ€™re already done! The `aria-hidden=true` attribute is added so that your icons are properly accessible (invisible).\n\n### è¯­ä¹‰å­—ä½“å›¾æ ‡\n\nå¦‚æžœæ‚¨çš„å›¾æ ‡å…·æœ‰è¯­ä¹‰å«ä¹‰ï¼Œæ‚¨åˆ™éœ€è¦æä¾›ä¸€ä¸ªå¯¹ååŠ©çš„æŠ€æœ¯å¯è§çš„æ–‡æœ¬æ›¿ä»£æ–¹æ³•ã€‚\n\n```jsx\nimport Icon from \'@material-ui/core/Icon\';\nimport Typography from \'@material-ui/core/Typography\';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Typography variant="srOnly">åˆ›å»ºä¸€ä¸ªç”¨æˆ·</Typography>\n```\n\n### å‚è€ƒ\n\n- https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/\n' },
        zg0K: function(e, n, o) {
            "use strict";
            var t = o("mXGw"),
                a = o.n(t),
                r = o("0Zz2");
            n.a = Object(r.a)(a.a.createElement(a.a.Fragment, null, a.a.createElement("path", { d: "M8 9h8v10H8z", opacity: ".3" }), a.a.createElement("path", { d: "M15.5 4l-1-1h-5l-1 1H5v2h14V4zM6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM8 9h8v10H8V9z" })), "DeleteTwoTone")
        }
    },
    [
        ["H1Ae", "5d41", "9da1"]
    ]
]);